
mydrivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  000028fa  0000298e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080016a  0080016a  00002a98  2**0
                  ALLOC
  3 .stab         000028d4  00000000  00000000  00002a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001964  00000000  00000000  0000536c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00006e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00007023  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00009032  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000a1a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b1a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000b344  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000b605  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000beb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__vector_1>
       8:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__vector_2>
       c:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 29 14 	call	0x2852	; 0x2852 <main>
      8a:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__floatunsisf+0xe0>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__floatunsisf+0xbc>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__floatunsisf+0x7c>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__floatunsisf+0x74>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__floatunsisf+0x9e>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__floatunsisf+0xe0>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__floatunsisf+0xe0>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__floatunsisf+0xcc>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__floatunsisf+0xc4>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <BCDSSD_voidDisplayNumber>:
#include "../include/HAL/BCD2SSD/BCD2SSD_Cfg.h"
#include "../include/HAL/BCD2SSD/BCD2SSD_interface.h"
#include "../include/HAL/BCD2SSD/BCD2SSD_Private.h"

void BCDSSD_voidDisplayNumber(DIO_PORTS A_DIOPort, LOWorHIGHNipple State,BcdNumbers A_u8Number)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <BCDSSD_voidDisplayNumber+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <BCDSSD_voidDisplayNumber+0x8>
     cde:	0f 92       	push	r0
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	6a 83       	std	Y+2, r22	; 0x02
     ce8:	4b 83       	std	Y+3, r20	; 0x03
	switch (State) {
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	3d 83       	std	Y+5, r19	; 0x05
     cf2:	2c 83       	std	Y+4, r18	; 0x04
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	9d 81       	ldd	r25, Y+5	; 0x05
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	31 f0       	breq	.+12     	; 0xd08 <BCDSSD_voidDisplayNumber+0x32>
     cfc:	2c 81       	ldd	r18, Y+4	; 0x04
     cfe:	3d 81       	ldd	r19, Y+5	; 0x05
     d00:	21 30       	cpi	r18, 0x01	; 1
     d02:	31 05       	cpc	r19, r1
     d04:	31 f0       	breq	.+12     	; 0xd12 <BCDSSD_voidDisplayNumber+0x3c>
     d06:	09 c0       	rjmp	.+18     	; 0xd1a <BCDSSD_voidDisplayNumber+0x44>
		case LOW_NIPPLE:
			write_low_nibble(A_DIOPort, A_u8Number);
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	6b 81       	ldd	r22, Y+3	; 0x03
     d0c:	0e 94 ef 0c 	call	0x19de	; 0x19de <write_low_nibble>
     d10:	04 c0       	rjmp	.+8      	; 0xd1a <BCDSSD_voidDisplayNumber+0x44>
			break;
		case HIGH_NIPPLE:
			write_high_nibble(A_DIOPort, A_u8Number);
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	6b 81       	ldd	r22, Y+3	; 0x03
     d16:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <write_high_nibble>
			break;
		default:
			break;
	}
}
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <BCDSSD_voidDisplayAscending>:

void BCDSSD_voidDisplayAscending(DIO_PORTS A_DIOPort, LOWorHIGHNipple State,u16 A_u16DelayinMs)
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	a4 97       	sbiw	r28, 0x24	; 36
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	8f 8f       	std	Y+31, r24	; 0x1f
     d40:	68 a3       	std	Y+32, r22	; 0x20
     d42:	5a a3       	std	Y+34, r21	; 0x22
     d44:	49 a3       	std	Y+33, r20	; 0x21
	switch (State) {
     d46:	88 a1       	ldd	r24, Y+32	; 0x20
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	3c a3       	std	Y+36, r19	; 0x24
     d4e:	2b a3       	std	Y+35, r18	; 0x23
     d50:	8b a1       	ldd	r24, Y+35	; 0x23
     d52:	9c a1       	ldd	r25, Y+36	; 0x24
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	39 f0       	breq	.+14     	; 0xd66 <BCDSSD_voidDisplayAscending+0x3c>
     d58:	2b a1       	ldd	r18, Y+35	; 0x23
     d5a:	3c a1       	ldd	r19, Y+36	; 0x24
     d5c:	21 30       	cpi	r18, 0x01	; 1
     d5e:	31 05       	cpc	r19, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <BCDSSD_voidDisplayAscending+0x3a>
     d62:	88 c0       	rjmp	.+272    	; 0xe74 <BCDSSD_voidDisplayAscending+0x14a>
     d64:	0d c1       	rjmp	.+538    	; 0xf80 <BCDSSD_voidDisplayAscending+0x256>
			case LOW_NIPPLE:
				for (u8 LocalIterator = Zero; LocalIterator <= Nine; ++LocalIterator)
     d66:	1e 8e       	std	Y+30, r1	; 0x1e
     d68:	80 c0       	rjmp	.+256    	; 0xe6a <BCDSSD_voidDisplayAscending+0x140>
				{
					write_low_nibble(A_DIOPort, LocalIterator);
     d6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d6c:	6e 8d       	ldd	r22, Y+30	; 0x1e
     d6e:	0e 94 ef 0c 	call	0x19de	; 0x19de <write_low_nibble>
					_delay_ms(A_u16DelayinMs);
     d72:	89 a1       	ldd	r24, Y+33	; 0x21
     d74:	9a a1       	ldd	r25, Y+34	; 0x22
     d76:	cc 01       	movw	r24, r24
     d78:	a0 e0       	ldi	r26, 0x00	; 0
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	bc 01       	movw	r22, r24
     d7e:	cd 01       	movw	r24, r26
     d80:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	89 8f       	std	Y+25, r24	; 0x19
     d8a:	9a 8f       	std	Y+26, r25	; 0x1a
     d8c:	ab 8f       	std	Y+27, r26	; 0x1b
     d8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d90:	69 8d       	ldd	r22, Y+25	; 0x19
     d92:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d94:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d96:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	4a e7       	ldi	r20, 0x7A	; 122
     d9e:	53 e4       	ldi	r21, 0x43	; 67
     da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	8d 8b       	std	Y+21, r24	; 0x15
     daa:	9e 8b       	std	Y+22, r25	; 0x16
     dac:	af 8b       	std	Y+23, r26	; 0x17
     dae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     db0:	6d 89       	ldd	r22, Y+21	; 0x15
     db2:	7e 89       	ldd	r23, Y+22	; 0x16
     db4:	8f 89       	ldd	r24, Y+23	; 0x17
     db6:	98 8d       	ldd	r25, Y+24	; 0x18
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e8       	ldi	r20, 0x80	; 128
     dbe:	5f e3       	ldi	r21, 0x3F	; 63
     dc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc4:	88 23       	and	r24, r24
     dc6:	2c f4       	brge	.+10     	; 0xdd2 <BCDSSD_voidDisplayAscending+0xa8>
		__ticks = 1;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	9c 8b       	std	Y+20, r25	; 0x14
     dce:	8b 8b       	std	Y+19, r24	; 0x13
     dd0:	3f c0       	rjmp	.+126    	; 0xe50 <BCDSSD_voidDisplayAscending+0x126>
	else if (__tmp > 65535)
     dd2:	6d 89       	ldd	r22, Y+21	; 0x15
     dd4:	7e 89       	ldd	r23, Y+22	; 0x16
     dd6:	8f 89       	ldd	r24, Y+23	; 0x17
     dd8:	98 8d       	ldd	r25, Y+24	; 0x18
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	3f ef       	ldi	r19, 0xFF	; 255
     dde:	4f e7       	ldi	r20, 0x7F	; 127
     de0:	57 e4       	ldi	r21, 0x47	; 71
     de2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de6:	18 16       	cp	r1, r24
     de8:	4c f5       	brge	.+82     	; 0xe3c <BCDSSD_voidDisplayAscending+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dea:	69 8d       	ldd	r22, Y+25	; 0x19
     dec:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     df0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e2       	ldi	r20, 0x20	; 32
     df8:	51 e4       	ldi	r21, 0x41	; 65
     dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	bc 01       	movw	r22, r24
     e04:	cd 01       	movw	r24, r26
     e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	9c 8b       	std	Y+20, r25	; 0x14
     e10:	8b 8b       	std	Y+19, r24	; 0x13
     e12:	0f c0       	rjmp	.+30     	; 0xe32 <BCDSSD_voidDisplayAscending+0x108>
     e14:	89 e1       	ldi	r24, 0x19	; 25
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	9a 8b       	std	Y+18, r25	; 0x12
     e1a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e1c:	89 89       	ldd	r24, Y+17	; 0x11
     e1e:	9a 89       	ldd	r25, Y+18	; 0x12
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <BCDSSD_voidDisplayAscending+0xf6>
     e24:	9a 8b       	std	Y+18, r25	; 0x12
     e26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e28:	8b 89       	ldd	r24, Y+19	; 0x13
     e2a:	9c 89       	ldd	r25, Y+20	; 0x14
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	9c 8b       	std	Y+20, r25	; 0x14
     e30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e32:	8b 89       	ldd	r24, Y+19	; 0x13
     e34:	9c 89       	ldd	r25, Y+20	; 0x14
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	69 f7       	brne	.-38     	; 0xe14 <BCDSSD_voidDisplayAscending+0xea>
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <BCDSSD_voidDisplayAscending+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e3c:	6d 89       	ldd	r22, Y+21	; 0x15
     e3e:	7e 89       	ldd	r23, Y+22	; 0x16
     e40:	8f 89       	ldd	r24, Y+23	; 0x17
     e42:	98 8d       	ldd	r25, Y+24	; 0x18
     e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	9c 8b       	std	Y+20, r25	; 0x14
     e4e:	8b 8b       	std	Y+19, r24	; 0x13
     e50:	8b 89       	ldd	r24, Y+19	; 0x13
     e52:	9c 89       	ldd	r25, Y+20	; 0x14
     e54:	98 8b       	std	Y+16, r25	; 0x10
     e56:	8f 87       	std	Y+15, r24	; 0x0f
     e58:	8f 85       	ldd	r24, Y+15	; 0x0f
     e5a:	98 89       	ldd	r25, Y+16	; 0x10
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <BCDSSD_voidDisplayAscending+0x132>
     e60:	98 8b       	std	Y+16, r25	; 0x10
     e62:	8f 87       	std	Y+15, r24	; 0x0f

void BCDSSD_voidDisplayAscending(DIO_PORTS A_DIOPort, LOWorHIGHNipple State,u16 A_u16DelayinMs)
{
	switch (State) {
			case LOW_NIPPLE:
				for (u8 LocalIterator = Zero; LocalIterator <= Nine; ++LocalIterator)
     e64:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	8e 8f       	std	Y+30, r24	; 0x1e
     e6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e6c:	8a 30       	cpi	r24, 0x0A	; 10
     e6e:	08 f4       	brcc	.+2      	; 0xe72 <BCDSSD_voidDisplayAscending+0x148>
     e70:	7c cf       	rjmp	.-264    	; 0xd6a <BCDSSD_voidDisplayAscending+0x40>
     e72:	86 c0       	rjmp	.+268    	; 0xf80 <BCDSSD_voidDisplayAscending+0x256>
					write_low_nibble(A_DIOPort, LocalIterator);
					_delay_ms(A_u16DelayinMs);
				}
				break;
			case HIGH_NIPPLE:
				for (u8 LocalIterator = Zero; LocalIterator <= Nine; ++LocalIterator)
     e74:	1d 8e       	std	Y+29, r1	; 0x1d
     e76:	80 c0       	rjmp	.+256    	; 0xf78 <BCDSSD_voidDisplayAscending+0x24e>
				{
					write_high_nibble(A_DIOPort, LocalIterator);
     e78:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e7a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     e7c:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <write_high_nibble>
					_delay_ms(A_u16DelayinMs);
     e80:	89 a1       	ldd	r24, Y+33	; 0x21
     e82:	9a a1       	ldd	r25, Y+34	; 0x22
     e84:	cc 01       	movw	r24, r24
     e86:	a0 e0       	ldi	r26, 0x00	; 0
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	bc 01       	movw	r22, r24
     e8c:	cd 01       	movw	r24, r26
     e8e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	8b 87       	std	Y+11, r24	; 0x0b
     e98:	9c 87       	std	Y+12, r25	; 0x0c
     e9a:	ad 87       	std	Y+13, r26	; 0x0d
     e9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9e:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	4a e7       	ldi	r20, 0x7A	; 122
     eac:	53 e4       	ldi	r21, 0x43	; 67
     eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	8f 83       	std	Y+7, r24	; 0x07
     eb8:	98 87       	std	Y+8, r25	; 0x08
     eba:	a9 87       	std	Y+9, r26	; 0x09
     ebc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ebe:	6f 81       	ldd	r22, Y+7	; 0x07
     ec0:	78 85       	ldd	r23, Y+8	; 0x08
     ec2:	89 85       	ldd	r24, Y+9	; 0x09
     ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e8       	ldi	r20, 0x80	; 128
     ecc:	5f e3       	ldi	r21, 0x3F	; 63
     ece:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed2:	88 23       	and	r24, r24
     ed4:	2c f4       	brge	.+10     	; 0xee0 <BCDSSD_voidDisplayAscending+0x1b6>
		__ticks = 1;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	3f c0       	rjmp	.+126    	; 0xf5e <BCDSSD_voidDisplayAscending+0x234>
	else if (__tmp > 65535)
     ee0:	6f 81       	ldd	r22, Y+7	; 0x07
     ee2:	78 85       	ldd	r23, Y+8	; 0x08
     ee4:	89 85       	ldd	r24, Y+9	; 0x09
     ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	3f ef       	ldi	r19, 0xFF	; 255
     eec:	4f e7       	ldi	r20, 0x7F	; 127
     eee:	57 e4       	ldi	r21, 0x47	; 71
     ef0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef4:	18 16       	cp	r1, r24
     ef6:	4c f5       	brge	.+82     	; 0xf4a <BCDSSD_voidDisplayAscending+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef8:	6b 85       	ldd	r22, Y+11	; 0x0b
     efa:	7c 85       	ldd	r23, Y+12	; 0x0c
     efc:	8d 85       	ldd	r24, Y+13	; 0x0d
     efe:	9e 85       	ldd	r25, Y+14	; 0x0e
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	40 e2       	ldi	r20, 0x20	; 32
     f06:	51 e4       	ldi	r21, 0x41	; 65
     f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	bc 01       	movw	r22, r24
     f12:	cd 01       	movw	r24, r26
     f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	9e 83       	std	Y+6, r25	; 0x06
     f1e:	8d 83       	std	Y+5, r24	; 0x05
     f20:	0f c0       	rjmp	.+30     	; 0xf40 <BCDSSD_voidDisplayAscending+0x216>
     f22:	89 e1       	ldi	r24, 0x19	; 25
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	9c 83       	std	Y+4, r25	; 0x04
     f28:	8b 83       	std	Y+3, r24	; 0x03
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <BCDSSD_voidDisplayAscending+0x204>
     f32:	9c 83       	std	Y+4, r25	; 0x04
     f34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f36:	8d 81       	ldd	r24, Y+5	; 0x05
     f38:	9e 81       	ldd	r25, Y+6	; 0x06
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	9e 83       	std	Y+6, r25	; 0x06
     f3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f40:	8d 81       	ldd	r24, Y+5	; 0x05
     f42:	9e 81       	ldd	r25, Y+6	; 0x06
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	69 f7       	brne	.-38     	; 0xf22 <BCDSSD_voidDisplayAscending+0x1f8>
     f48:	14 c0       	rjmp	.+40     	; 0xf72 <BCDSSD_voidDisplayAscending+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4a:	6f 81       	ldd	r22, Y+7	; 0x07
     f4c:	78 85       	ldd	r23, Y+8	; 0x08
     f4e:	89 85       	ldd	r24, Y+9	; 0x09
     f50:	9a 85       	ldd	r25, Y+10	; 0x0a
     f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	9e 83       	std	Y+6, r25	; 0x06
     f5c:	8d 83       	std	Y+5, r24	; 0x05
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <BCDSSD_voidDisplayAscending+0x240>
     f6e:	9a 83       	std	Y+2, r25	; 0x02
     f70:	89 83       	std	Y+1, r24	; 0x01
					write_low_nibble(A_DIOPort, LocalIterator);
					_delay_ms(A_u16DelayinMs);
				}
				break;
			case HIGH_NIPPLE:
				for (u8 LocalIterator = Zero; LocalIterator <= Nine; ++LocalIterator)
     f72:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	8d 8f       	std	Y+29, r24	; 0x1d
     f78:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f7a:	8a 30       	cpi	r24, 0x0A	; 10
     f7c:	08 f4       	brcc	.+2      	; 0xf80 <BCDSSD_voidDisplayAscending+0x256>
     f7e:	7c cf       	rjmp	.-264    	; 0xe78 <BCDSSD_voidDisplayAscending+0x14e>
				}
				break;
			default:
				break;
		}
}
     f80:	a4 96       	adiw	r28, 0x24	; 36
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <BCDSSD_voidDisplayDescending>:

void BCDSSD_voidDisplayDescending(DIO_PORTS A_DIOPort, LOWorHIGHNipple State, u8 A_u16DelayinMs)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	a3 97       	sbiw	r28, 0x23	; 35
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	8f 8f       	std	Y+31, r24	; 0x1f
     fa8:	68 a3       	std	Y+32, r22	; 0x20
     faa:	49 a3       	std	Y+33, r20	; 0x21
	switch (State) {
     fac:	88 a1       	ldd	r24, Y+32	; 0x20
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	3b a3       	std	Y+35, r19	; 0x23
     fb4:	2a a3       	std	Y+34, r18	; 0x22
     fb6:	8a a1       	ldd	r24, Y+34	; 0x22
     fb8:	9b a1       	ldd	r25, Y+35	; 0x23
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	39 f0       	breq	.+14     	; 0xfcc <BCDSSD_voidDisplayDescending+0x3a>
     fbe:	2a a1       	ldd	r18, Y+34	; 0x22
     fc0:	3b a1       	ldd	r19, Y+35	; 0x23
     fc2:	21 30       	cpi	r18, 0x01	; 1
     fc4:	31 05       	cpc	r19, r1
     fc6:	09 f4       	brne	.+2      	; 0xfca <BCDSSD_voidDisplayDescending+0x38>
     fc8:	8a c0       	rjmp	.+276    	; 0x10de <BCDSSD_voidDisplayDescending+0x14c>
     fca:	0c c1       	rjmp	.+536    	; 0x11e4 <BCDSSD_voidDisplayDescending+0x252>
		case LOW_NIPPLE:
			for (s8 LocalIterator = Nine; LocalIterator >= Zero; ++LocalIterator)
     fcc:	89 e0       	ldi	r24, 0x09	; 9
     fce:	8e 8f       	std	Y+30, r24	; 0x1e
     fd0:	81 c0       	rjmp	.+258    	; 0x10d4 <BCDSSD_voidDisplayDescending+0x142>
			{
				write_low_nibble(A_DIOPort, LocalIterator);
     fd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fd6:	69 2f       	mov	r22, r25
     fd8:	0e 94 ef 0c 	call	0x19de	; 0x19de <write_low_nibble>
				_delay_ms(A_u16DelayinMs);
     fdc:	89 a1       	ldd	r24, Y+33	; 0x21
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	a0 e0       	ldi	r26, 0x00	; 0
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	89 8f       	std	Y+25, r24	; 0x19
     ff4:	9a 8f       	std	Y+26, r25	; 0x1a
     ff6:	ab 8f       	std	Y+27, r26	; 0x1b
     ff8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffa:	69 8d       	ldd	r22, Y+25	; 0x19
     ffc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ffe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1000:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	4a e7       	ldi	r20, 0x7A	; 122
    1008:	53 e4       	ldi	r21, 0x43	; 67
    100a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	8d 8b       	std	Y+21, r24	; 0x15
    1014:	9e 8b       	std	Y+22, r25	; 0x16
    1016:	af 8b       	std	Y+23, r26	; 0x17
    1018:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    101a:	6d 89       	ldd	r22, Y+21	; 0x15
    101c:	7e 89       	ldd	r23, Y+22	; 0x16
    101e:	8f 89       	ldd	r24, Y+23	; 0x17
    1020:	98 8d       	ldd	r25, Y+24	; 0x18
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e8       	ldi	r20, 0x80	; 128
    1028:	5f e3       	ldi	r21, 0x3F	; 63
    102a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    102e:	88 23       	and	r24, r24
    1030:	2c f4       	brge	.+10     	; 0x103c <BCDSSD_voidDisplayDescending+0xaa>
		__ticks = 1;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	9c 8b       	std	Y+20, r25	; 0x14
    1038:	8b 8b       	std	Y+19, r24	; 0x13
    103a:	3f c0       	rjmp	.+126    	; 0x10ba <BCDSSD_voidDisplayDescending+0x128>
	else if (__tmp > 65535)
    103c:	6d 89       	ldd	r22, Y+21	; 0x15
    103e:	7e 89       	ldd	r23, Y+22	; 0x16
    1040:	8f 89       	ldd	r24, Y+23	; 0x17
    1042:	98 8d       	ldd	r25, Y+24	; 0x18
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	3f ef       	ldi	r19, 0xFF	; 255
    1048:	4f e7       	ldi	r20, 0x7F	; 127
    104a:	57 e4       	ldi	r21, 0x47	; 71
    104c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1050:	18 16       	cp	r1, r24
    1052:	4c f5       	brge	.+82     	; 0x10a6 <BCDSSD_voidDisplayDescending+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1054:	69 8d       	ldd	r22, Y+25	; 0x19
    1056:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1058:	8b 8d       	ldd	r24, Y+27	; 0x1b
    105a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e2       	ldi	r20, 0x20	; 32
    1062:	51 e4       	ldi	r21, 0x41	; 65
    1064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	bc 01       	movw	r22, r24
    106e:	cd 01       	movw	r24, r26
    1070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	9c 8b       	std	Y+20, r25	; 0x14
    107a:	8b 8b       	std	Y+19, r24	; 0x13
    107c:	0f c0       	rjmp	.+30     	; 0x109c <BCDSSD_voidDisplayDescending+0x10a>
    107e:	89 e1       	ldi	r24, 0x19	; 25
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	9a 8b       	std	Y+18, r25	; 0x12
    1084:	89 8b       	std	Y+17, r24	; 0x11
    1086:	89 89       	ldd	r24, Y+17	; 0x11
    1088:	9a 89       	ldd	r25, Y+18	; 0x12
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <BCDSSD_voidDisplayDescending+0xf8>
    108e:	9a 8b       	std	Y+18, r25	; 0x12
    1090:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1092:	8b 89       	ldd	r24, Y+19	; 0x13
    1094:	9c 89       	ldd	r25, Y+20	; 0x14
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	9c 8b       	std	Y+20, r25	; 0x14
    109a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109c:	8b 89       	ldd	r24, Y+19	; 0x13
    109e:	9c 89       	ldd	r25, Y+20	; 0x14
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	69 f7       	brne	.-38     	; 0x107e <BCDSSD_voidDisplayDescending+0xec>
    10a4:	14 c0       	rjmp	.+40     	; 0x10ce <BCDSSD_voidDisplayDescending+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a6:	6d 89       	ldd	r22, Y+21	; 0x15
    10a8:	7e 89       	ldd	r23, Y+22	; 0x16
    10aa:	8f 89       	ldd	r24, Y+23	; 0x17
    10ac:	98 8d       	ldd	r25, Y+24	; 0x18
    10ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	9c 8b       	std	Y+20, r25	; 0x14
    10b8:	8b 8b       	std	Y+19, r24	; 0x13
    10ba:	8b 89       	ldd	r24, Y+19	; 0x13
    10bc:	9c 89       	ldd	r25, Y+20	; 0x14
    10be:	98 8b       	std	Y+16, r25	; 0x10
    10c0:	8f 87       	std	Y+15, r24	; 0x0f
    10c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c4:	98 89       	ldd	r25, Y+16	; 0x10
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <BCDSSD_voidDisplayDescending+0x134>
    10ca:	98 8b       	std	Y+16, r25	; 0x10
    10cc:	8f 87       	std	Y+15, r24	; 0x0f

void BCDSSD_voidDisplayDescending(DIO_PORTS A_DIOPort, LOWorHIGHNipple State, u8 A_u16DelayinMs)
{
	switch (State) {
		case LOW_NIPPLE:
			for (s8 LocalIterator = Nine; LocalIterator >= Zero; ++LocalIterator)
    10ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    10d2:	8e 8f       	std	Y+30, r24	; 0x1e
    10d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10d6:	88 23       	and	r24, r24
    10d8:	0c f0       	brlt	.+2      	; 0x10dc <BCDSSD_voidDisplayDescending+0x14a>
    10da:	7b cf       	rjmp	.-266    	; 0xfd2 <BCDSSD_voidDisplayDescending+0x40>
    10dc:	83 c0       	rjmp	.+262    	; 0x11e4 <BCDSSD_voidDisplayDescending+0x252>
				write_low_nibble(A_DIOPort, LocalIterator);
				_delay_ms(A_u16DelayinMs);
			}
			break;
		case HIGH_NIPPLE:
			for (u8 LocalIterator = Nine; LocalIterator >= Zero; ++LocalIterator)
    10de:	89 e0       	ldi	r24, 0x09	; 9
    10e0:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				write_high_nibble(A_DIOPort, LocalIterator);
    10e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10e4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    10e6:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <write_high_nibble>
				_delay_ms(A_u16DelayinMs);
    10ea:	89 a1       	ldd	r24, Y+33	; 0x21
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a0 e0       	ldi	r26, 0x00	; 0
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	bc 01       	movw	r22, r24
    10f6:	cd 01       	movw	r24, r26
    10f8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	8b 87       	std	Y+11, r24	; 0x0b
    1102:	9c 87       	std	Y+12, r25	; 0x0c
    1104:	ad 87       	std	Y+13, r26	; 0x0d
    1106:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1108:	6b 85       	ldd	r22, Y+11	; 0x0b
    110a:	7c 85       	ldd	r23, Y+12	; 0x0c
    110c:	8d 85       	ldd	r24, Y+13	; 0x0d
    110e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	4a e7       	ldi	r20, 0x7A	; 122
    1116:	53 e4       	ldi	r21, 0x43	; 67
    1118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	8f 83       	std	Y+7, r24	; 0x07
    1122:	98 87       	std	Y+8, r25	; 0x08
    1124:	a9 87       	std	Y+9, r26	; 0x09
    1126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1128:	6f 81       	ldd	r22, Y+7	; 0x07
    112a:	78 85       	ldd	r23, Y+8	; 0x08
    112c:	89 85       	ldd	r24, Y+9	; 0x09
    112e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e8       	ldi	r20, 0x80	; 128
    1136:	5f e3       	ldi	r21, 0x3F	; 63
    1138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    113c:	88 23       	and	r24, r24
    113e:	2c f4       	brge	.+10     	; 0x114a <BCDSSD_voidDisplayDescending+0x1b8>
		__ticks = 1;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9e 83       	std	Y+6, r25	; 0x06
    1146:	8d 83       	std	Y+5, r24	; 0x05
    1148:	3f c0       	rjmp	.+126    	; 0x11c8 <BCDSSD_voidDisplayDescending+0x236>
	else if (__tmp > 65535)
    114a:	6f 81       	ldd	r22, Y+7	; 0x07
    114c:	78 85       	ldd	r23, Y+8	; 0x08
    114e:	89 85       	ldd	r24, Y+9	; 0x09
    1150:	9a 85       	ldd	r25, Y+10	; 0x0a
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	3f ef       	ldi	r19, 0xFF	; 255
    1156:	4f e7       	ldi	r20, 0x7F	; 127
    1158:	57 e4       	ldi	r21, 0x47	; 71
    115a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    115e:	18 16       	cp	r1, r24
    1160:	4c f5       	brge	.+82     	; 0x11b4 <BCDSSD_voidDisplayDescending+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1162:	6b 85       	ldd	r22, Y+11	; 0x0b
    1164:	7c 85       	ldd	r23, Y+12	; 0x0c
    1166:	8d 85       	ldd	r24, Y+13	; 0x0d
    1168:	9e 85       	ldd	r25, Y+14	; 0x0e
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e2       	ldi	r20, 0x20	; 32
    1170:	51 e4       	ldi	r21, 0x41	; 65
    1172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	9e 83       	std	Y+6, r25	; 0x06
    1188:	8d 83       	std	Y+5, r24	; 0x05
    118a:	0f c0       	rjmp	.+30     	; 0x11aa <BCDSSD_voidDisplayDescending+0x218>
    118c:	89 e1       	ldi	r24, 0x19	; 25
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	9c 83       	std	Y+4, r25	; 0x04
    1192:	8b 83       	std	Y+3, r24	; 0x03
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <BCDSSD_voidDisplayDescending+0x206>
    119c:	9c 83       	std	Y+4, r25	; 0x04
    119e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a0:	8d 81       	ldd	r24, Y+5	; 0x05
    11a2:	9e 81       	ldd	r25, Y+6	; 0x06
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	9e 83       	std	Y+6, r25	; 0x06
    11a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	69 f7       	brne	.-38     	; 0x118c <BCDSSD_voidDisplayDescending+0x1fa>
    11b2:	14 c0       	rjmp	.+40     	; 0x11dc <BCDSSD_voidDisplayDescending+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b4:	6f 81       	ldd	r22, Y+7	; 0x07
    11b6:	78 85       	ldd	r23, Y+8	; 0x08
    11b8:	89 85       	ldd	r24, Y+9	; 0x09
    11ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    11bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ca:	9e 81       	ldd	r25, Y+6	; 0x06
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <BCDSSD_voidDisplayDescending+0x242>
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
				write_low_nibble(A_DIOPort, LocalIterator);
				_delay_ms(A_u16DelayinMs);
			}
			break;
		case HIGH_NIPPLE:
			for (u8 LocalIterator = Nine; LocalIterator >= Zero; ++LocalIterator)
    11dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11de:	8f 5f       	subi	r24, 0xFF	; 255
    11e0:	8d 8f       	std	Y+29, r24	; 0x1d
    11e2:	7f cf       	rjmp	.-258    	; 0x10e2 <BCDSSD_voidDisplayDescending+0x150>
			}
			break;
		default:
			break;
	}
}
    11e4:	a3 96       	adiw	r28, 0x23	; 35
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <MDIO_voidInit>:
#include "../include/MCAL/DIO/DIO_Cfg.h"

#include "../include/HAL/BCD2SSD/BCD2SSD_interface.h"

void MDIO_voidInit()
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG = CONC_BIT (PORTA_PIN7_DIRECTION,PORTA_PIN6_DIRECTION,PORTA_PIN5_DIRECTION,
    11fe:	ea e3       	ldi	r30, 0x3A	; 58
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	80 83       	st	Z, r24
						 PORTA_PIN4_DIRECTION,PORTA_PIN3_DIRECTION,PORTA_PIN2_DIRECTION,
						 PORTA_PIN1_DIRECTION,PORTA_PIN0_DIRECTION);

	DDRB_REG = CONC_BIT (PORTB_PIN7_DIRECTION,PORTB_PIN6_DIRECTION,PORTB_PIN5_DIRECTION,
    1206:	e7 e3       	ldi	r30, 0x37	; 55
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	10 82       	st	Z, r1
						 PORTB_PIN4_DIRECTION,PORTB_PIN3_DIRECTION,PORTB_PIN2_DIRECTION,
						 PORTB_PIN1_DIRECTION,PORTB_PIN0_DIRECTION);

	DDRC_REG = CONC_BIT (PORTC_PIN7_DIRECTION,PORTC_PIN6_DIRECTION,PORTC_PIN5_DIRECTION,
    120c:	e4 e3       	ldi	r30, 0x34	; 52
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	10 82       	st	Z, r1
						 PORTC_PIN4_DIRECTION,PORTC_PIN3_DIRECTION,PORTC_PIN2_DIRECTION,
						 PORTC_PIN1_DIRECTION,PORTC_PIN0_DIRECTION);

	DDRD_REG = CONC_BIT (PORTD_PIN7_DIRECTION,PORTD_PIN6_DIRECTION,PORTD_PIN5_DIRECTION,
    1212:	e1 e3       	ldi	r30, 0x31	; 49
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	8f e0       	ldi	r24, 0x0F	; 15
    1218:	80 83       	st	Z, r24
						 PORTD_PIN4_DIRECTION,PORTD_PIN3_DIRECTION,PORTD_PIN2_DIRECTION,
						 PORTD_PIN1_DIRECTION,PORTD_PIN0_DIRECTION);

	PORTA_REG = CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE,PORTA_PIN5_VALUE,
    121a:	eb e3       	ldi	r30, 0x3B	; 59
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	10 82       	st	Z, r1
						 PORTA_PIN4_VALUE,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE,
						 PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);

	PORTB_REG = CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE,PORTB_PIN5_VALUE,
    1220:	e8 e3       	ldi	r30, 0x38	; 56
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	10 82       	st	Z, r1
						 PORTB_PIN4_VALUE,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE,
						 PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);

	PORTC_REG = CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE,PORTC_PIN5_VALUE,
    1226:	e5 e3       	ldi	r30, 0x35	; 53
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	80 83       	st	Z, r24
						 PORTC_PIN4_VALUE,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE,
						 PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);

	PORTA_REG = CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE,PORTD_PIN5_VALUE,
    122e:	eb e3       	ldi	r30, 0x3B	; 59
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	10 82       	st	Z, r1
						 PORTD_PIN4_VALUE,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE,
						 PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);
}
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <MDIO_voidSetPinDirection>:


void MDIO_voidSetPinDirection (DIO_PORTS A_DIOPort, DIO_PINS A_DIOPin, PIN_DIRECTION A_PinDirection)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	2d 97       	sbiw	r28, 0x0d	; 13
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	6a 83       	std	Y+2, r22	; 0x02
    1252:	4b 83       	std	Y+3, r20	; 0x03
	// Input validation
	if ((A_DIOPort <= PORTD)&&(A_DIOPin<=PIN7)&&(A_PinDirection<=DIO_OUTPUT))
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	84 30       	cpi	r24, 0x04	; 4
    1258:	08 f0       	brcs	.+2      	; 0x125c <MDIO_voidSetPinDirection+0x22>
    125a:	08 c1       	rjmp	.+528    	; 0x146c <MDIO_voidSetPinDirection+0x232>
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	88 30       	cpi	r24, 0x08	; 8
    1260:	08 f0       	brcs	.+2      	; 0x1264 <MDIO_voidSetPinDirection+0x2a>
    1262:	04 c1       	rjmp	.+520    	; 0x146c <MDIO_voidSetPinDirection+0x232>
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	08 f0       	brcs	.+2      	; 0x126c <MDIO_voidSetPinDirection+0x32>
    126a:	00 c1       	rjmp	.+512    	; 0x146c <MDIO_voidSetPinDirection+0x232>
	{
		switch (A_DIOPort)
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	3d 87       	std	Y+13, r19	; 0x0d
    1274:	2c 87       	std	Y+12, r18	; 0x0c
    1276:	8c 85       	ldd	r24, Y+12	; 0x0c
    1278:	9d 85       	ldd	r25, Y+13	; 0x0d
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	91 05       	cpc	r25, r1
    127e:	09 f4       	brne	.+2      	; 0x1282 <MDIO_voidSetPinDirection+0x48>
    1280:	4f c0       	rjmp	.+158    	; 0x1320 <MDIO_voidSetPinDirection+0xe6>
    1282:	2c 85       	ldd	r18, Y+12	; 0x0c
    1284:	3d 85       	ldd	r19, Y+13	; 0x0d
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	2c f4       	brge	.+10     	; 0x1296 <MDIO_voidSetPinDirection+0x5c>
    128c:	8c 85       	ldd	r24, Y+12	; 0x0c
    128e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	71 f0       	breq	.+28     	; 0x12b0 <MDIO_voidSetPinDirection+0x76>
    1294:	eb c0       	rjmp	.+470    	; 0x146c <MDIO_voidSetPinDirection+0x232>
    1296:	2c 85       	ldd	r18, Y+12	; 0x0c
    1298:	3d 85       	ldd	r19, Y+13	; 0x0d
    129a:	22 30       	cpi	r18, 0x02	; 2
    129c:	31 05       	cpc	r19, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <MDIO_voidSetPinDirection+0x68>
    12a0:	77 c0       	rjmp	.+238    	; 0x1390 <MDIO_voidSetPinDirection+0x156>
    12a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    12a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    12a6:	83 30       	cpi	r24, 0x03	; 3
    12a8:	91 05       	cpc	r25, r1
    12aa:	09 f4       	brne	.+2      	; 0x12ae <MDIO_voidSetPinDirection+0x74>
    12ac:	a9 c0       	rjmp	.+338    	; 0x1400 <MDIO_voidSetPinDirection+0x1c6>
    12ae:	de c0       	rjmp	.+444    	; 0x146c <MDIO_voidSetPinDirection+0x232>
		{
		case PORTA:
					switch(A_PinDirection)
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	3b 87       	std	Y+11, r19	; 0x0b
    12b8:	2a 87       	std	Y+10, r18	; 0x0a
    12ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    12bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	d1 f0       	breq	.+52     	; 0x12f6 <MDIO_voidSetPinDirection+0xbc>
    12c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    12c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    12c6:	21 30       	cpi	r18, 0x01	; 1
    12c8:	31 05       	cpc	r19, r1
    12ca:	09 f0       	breq	.+2      	; 0x12ce <MDIO_voidSetPinDirection+0x94>
    12cc:	cf c0       	rjmp	.+414    	; 0x146c <MDIO_voidSetPinDirection+0x232>
					{
					case DIO_OUTPUT: SET_BIT(DDRA_REG,A_DIOPin); break;
    12ce:	aa e3       	ldi	r26, 0x3A	; 58
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ea e3       	ldi	r30, 0x3A	; 58
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <MDIO_voidSetPinDirection+0xb2>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <MDIO_voidSetPinDirection+0xae>
    12f0:	84 2b       	or	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	bb c0       	rjmp	.+374    	; 0x146c <MDIO_voidSetPinDirection+0x232>
					case DIO_INPUT:  CLR_BIT(DDRA_REG,A_DIOPin); break;
    12f6:	aa e3       	ldi	r26, 0x3A	; 58
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	ea e3       	ldi	r30, 0x3A	; 58
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <MDIO_voidSetPinDirection+0xda>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <MDIO_voidSetPinDirection+0xd6>
    1318:	80 95       	com	r24
    131a:	84 23       	and	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	a6 c0       	rjmp	.+332    	; 0x146c <MDIO_voidSetPinDirection+0x232>
					}
					break;
		case PORTB:
					switch(A_PinDirection)
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	39 87       	std	Y+9, r19	; 0x09
    1328:	28 87       	std	Y+8, r18	; 0x08
    132a:	88 85       	ldd	r24, Y+8	; 0x08
    132c:	99 85       	ldd	r25, Y+9	; 0x09
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	d1 f0       	breq	.+52     	; 0x1366 <MDIO_voidSetPinDirection+0x12c>
    1332:	28 85       	ldd	r18, Y+8	; 0x08
    1334:	39 85       	ldd	r19, Y+9	; 0x09
    1336:	21 30       	cpi	r18, 0x01	; 1
    1338:	31 05       	cpc	r19, r1
    133a:	09 f0       	breq	.+2      	; 0x133e <MDIO_voidSetPinDirection+0x104>
    133c:	97 c0       	rjmp	.+302    	; 0x146c <MDIO_voidSetPinDirection+0x232>
					{
					case DIO_OUTPUT: SET_BIT(DDRB_REG,A_DIOPin); break;
    133e:	a7 e3       	ldi	r26, 0x37	; 55
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e7 e3       	ldi	r30, 0x37	; 55
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 2e       	mov	r0, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <MDIO_voidSetPinDirection+0x122>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <MDIO_voidSetPinDirection+0x11e>
    1360:	84 2b       	or	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	83 c0       	rjmp	.+262    	; 0x146c <MDIO_voidSetPinDirection+0x232>
					case DIO_INPUT:  CLR_BIT(DDRB_REG,A_DIOPin); break;
    1366:	a7 e3       	ldi	r26, 0x37	; 55
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e7 e3       	ldi	r30, 0x37	; 55
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <MDIO_voidSetPinDirection+0x14a>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <MDIO_voidSetPinDirection+0x146>
    1388:	80 95       	com	r24
    138a:	84 23       	and	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	6e c0       	rjmp	.+220    	; 0x146c <MDIO_voidSetPinDirection+0x232>
					}
					break;
		case PORTC:
					switch(A_PinDirection)
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	3f 83       	std	Y+7, r19	; 0x07
    1398:	2e 83       	std	Y+6, r18	; 0x06
    139a:	8e 81       	ldd	r24, Y+6	; 0x06
    139c:	9f 81       	ldd	r25, Y+7	; 0x07
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	d1 f0       	breq	.+52     	; 0x13d6 <MDIO_voidSetPinDirection+0x19c>
    13a2:	2e 81       	ldd	r18, Y+6	; 0x06
    13a4:	3f 81       	ldd	r19, Y+7	; 0x07
    13a6:	21 30       	cpi	r18, 0x01	; 1
    13a8:	31 05       	cpc	r19, r1
    13aa:	09 f0       	breq	.+2      	; 0x13ae <MDIO_voidSetPinDirection+0x174>
    13ac:	5f c0       	rjmp	.+190    	; 0x146c <MDIO_voidSetPinDirection+0x232>
					{
					case DIO_OUTPUT: SET_BIT(DDRC_REG,A_DIOPin); break;
    13ae:	a4 e3       	ldi	r26, 0x34	; 52
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e4 e3       	ldi	r30, 0x34	; 52
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <MDIO_voidSetPinDirection+0x192>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <MDIO_voidSetPinDirection+0x18e>
    13d0:	84 2b       	or	r24, r20
    13d2:	8c 93       	st	X, r24
    13d4:	4b c0       	rjmp	.+150    	; 0x146c <MDIO_voidSetPinDirection+0x232>
					case DIO_INPUT:  CLR_BIT(DDRC_REG,A_DIOPin); break;
    13d6:	a4 e3       	ldi	r26, 0x34	; 52
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e4 e3       	ldi	r30, 0x34	; 52
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <MDIO_voidSetPinDirection+0x1ba>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <MDIO_voidSetPinDirection+0x1b6>
    13f8:	80 95       	com	r24
    13fa:	84 23       	and	r24, r20
    13fc:	8c 93       	st	X, r24
    13fe:	36 c0       	rjmp	.+108    	; 0x146c <MDIO_voidSetPinDirection+0x232>
					}
					break;
		case PORTD:
					switch(A_PinDirection)
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3d 83       	std	Y+5, r19	; 0x05
    1408:	2c 83       	std	Y+4, r18	; 0x04
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	9d 81       	ldd	r25, Y+5	; 0x05
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	c9 f0       	breq	.+50     	; 0x1444 <MDIO_voidSetPinDirection+0x20a>
    1412:	2c 81       	ldd	r18, Y+4	; 0x04
    1414:	3d 81       	ldd	r19, Y+5	; 0x05
    1416:	21 30       	cpi	r18, 0x01	; 1
    1418:	31 05       	cpc	r19, r1
    141a:	41 f5       	brne	.+80     	; 0x146c <MDIO_voidSetPinDirection+0x232>
					{
					case DIO_OUTPUT: SET_BIT(DDRD_REG,A_DIOPin); break;
    141c:	a1 e3       	ldi	r26, 0x31	; 49
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e1 e3       	ldi	r30, 0x31	; 49
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <MDIO_voidSetPinDirection+0x200>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <MDIO_voidSetPinDirection+0x1fc>
    143e:	84 2b       	or	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	14 c0       	rjmp	.+40     	; 0x146c <MDIO_voidSetPinDirection+0x232>
					case DIO_INPUT:  CLR_BIT(DDRD_REG,A_DIOPin); break;
    1444:	a1 e3       	ldi	r26, 0x31	; 49
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e1 e3       	ldi	r30, 0x31	; 49
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <MDIO_voidSetPinDirection+0x228>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <MDIO_voidSetPinDirection+0x224>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
					}
					break;
		default: break;
		}
	}
}
    146c:	2d 96       	adiw	r28, 0x0d	; 13
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <MDIO_voidSetPinStatus>:

void MDIO_voidSetPinStatus (DIO_PORTS A_DIOPort, DIO_PINS A_DIOPin, PIN_STATUS A_PinStatus)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	2d 97       	sbiw	r28, 0x0d	; 13
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	6a 83       	std	Y+2, r22	; 0x02
    1496:	4b 83       	std	Y+3, r20	; 0x03
	// Input validation
	if ((A_DIOPort <= PORTD)&&(A_DIOPin<=PIN7)&&(A_PinStatus<=DIO_SET))
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	84 30       	cpi	r24, 0x04	; 4
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <MDIO_voidSetPinStatus+0x22>
    149e:	08 c1       	rjmp	.+528    	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	88 30       	cpi	r24, 0x08	; 8
    14a4:	08 f0       	brcs	.+2      	; 0x14a8 <MDIO_voidSetPinStatus+0x2a>
    14a6:	04 c1       	rjmp	.+520    	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <MDIO_voidSetPinStatus+0x32>
    14ae:	00 c1       	rjmp	.+512    	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
	{
		switch (A_DIOPort)
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3d 87       	std	Y+13, r19	; 0x0d
    14b8:	2c 87       	std	Y+12, r18	; 0x0c
    14ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    14bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	91 05       	cpc	r25, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <MDIO_voidSetPinStatus+0x48>
    14c4:	4f c0       	rjmp	.+158    	; 0x1564 <MDIO_voidSetPinStatus+0xe6>
    14c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    14c8:	3d 85       	ldd	r19, Y+13	; 0x0d
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	2c f4       	brge	.+10     	; 0x14da <MDIO_voidSetPinStatus+0x5c>
    14d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    14d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	71 f0       	breq	.+28     	; 0x14f4 <MDIO_voidSetPinStatus+0x76>
    14d8:	eb c0       	rjmp	.+470    	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
    14da:	2c 85       	ldd	r18, Y+12	; 0x0c
    14dc:	3d 85       	ldd	r19, Y+13	; 0x0d
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <MDIO_voidSetPinStatus+0x68>
    14e4:	77 c0       	rjmp	.+238    	; 0x15d4 <MDIO_voidSetPinStatus+0x156>
    14e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    14e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    14ea:	83 30       	cpi	r24, 0x03	; 3
    14ec:	91 05       	cpc	r25, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <MDIO_voidSetPinStatus+0x74>
    14f0:	a9 c0       	rjmp	.+338    	; 0x1644 <MDIO_voidSetPinStatus+0x1c6>
    14f2:	de c0       	rjmp	.+444    	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
		{
		case PORTA:
					switch(A_PinStatus)
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	3b 87       	std	Y+11, r19	; 0x0b
    14fc:	2a 87       	std	Y+10, r18	; 0x0a
    14fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1500:	9b 85       	ldd	r25, Y+11	; 0x0b
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	d1 f0       	breq	.+52     	; 0x153a <MDIO_voidSetPinStatus+0xbc>
    1506:	2a 85       	ldd	r18, Y+10	; 0x0a
    1508:	3b 85       	ldd	r19, Y+11	; 0x0b
    150a:	21 30       	cpi	r18, 0x01	; 1
    150c:	31 05       	cpc	r19, r1
    150e:	09 f0       	breq	.+2      	; 0x1512 <MDIO_voidSetPinStatus+0x94>
    1510:	cf c0       	rjmp	.+414    	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
					{
					case DIO_SET:   SET_BIT(PORTA_REG,A_DIOPin); break;
    1512:	ab e3       	ldi	r26, 0x3B	; 59
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	eb e3       	ldi	r30, 0x3B	; 59
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <MDIO_voidSetPinStatus+0xb2>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <MDIO_voidSetPinStatus+0xae>
    1534:	84 2b       	or	r24, r20
    1536:	8c 93       	st	X, r24
    1538:	bb c0       	rjmp	.+374    	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
					case DIO_RESET: CLR_BIT(PORTA_REG,A_DIOPin); break;
    153a:	ab e3       	ldi	r26, 0x3B	; 59
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	eb e3       	ldi	r30, 0x3B	; 59
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <MDIO_voidSetPinStatus+0xda>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <MDIO_voidSetPinStatus+0xd6>
    155c:	80 95       	com	r24
    155e:	84 23       	and	r24, r20
    1560:	8c 93       	st	X, r24
    1562:	a6 c0       	rjmp	.+332    	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
					}
					break;
		case PORTB:
					switch(A_PinStatus)
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	39 87       	std	Y+9, r19	; 0x09
    156c:	28 87       	std	Y+8, r18	; 0x08
    156e:	88 85       	ldd	r24, Y+8	; 0x08
    1570:	99 85       	ldd	r25, Y+9	; 0x09
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	d1 f0       	breq	.+52     	; 0x15aa <MDIO_voidSetPinStatus+0x12c>
    1576:	28 85       	ldd	r18, Y+8	; 0x08
    1578:	39 85       	ldd	r19, Y+9	; 0x09
    157a:	21 30       	cpi	r18, 0x01	; 1
    157c:	31 05       	cpc	r19, r1
    157e:	09 f0       	breq	.+2      	; 0x1582 <MDIO_voidSetPinStatus+0x104>
    1580:	97 c0       	rjmp	.+302    	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
					{
					case DIO_SET:   SET_BIT(PORTB_REG,A_DIOPin); break;
    1582:	a8 e3       	ldi	r26, 0x38	; 56
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e8 e3       	ldi	r30, 0x38	; 56
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <MDIO_voidSetPinStatus+0x122>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <MDIO_voidSetPinStatus+0x11e>
    15a4:	84 2b       	or	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	83 c0       	rjmp	.+262    	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
					case DIO_RESET: CLR_BIT(PORTB_REG,A_DIOPin); break;
    15aa:	a8 e3       	ldi	r26, 0x38	; 56
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e8 e3       	ldi	r30, 0x38	; 56
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <MDIO_voidSetPinStatus+0x14a>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <MDIO_voidSetPinStatus+0x146>
    15cc:	80 95       	com	r24
    15ce:	84 23       	and	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	6e c0       	rjmp	.+220    	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
					}
					break;
		case PORTC:
					switch(A_PinStatus)
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	3f 83       	std	Y+7, r19	; 0x07
    15dc:	2e 83       	std	Y+6, r18	; 0x06
    15de:	8e 81       	ldd	r24, Y+6	; 0x06
    15e0:	9f 81       	ldd	r25, Y+7	; 0x07
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	d1 f0       	breq	.+52     	; 0x161a <MDIO_voidSetPinStatus+0x19c>
    15e6:	2e 81       	ldd	r18, Y+6	; 0x06
    15e8:	3f 81       	ldd	r19, Y+7	; 0x07
    15ea:	21 30       	cpi	r18, 0x01	; 1
    15ec:	31 05       	cpc	r19, r1
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <MDIO_voidSetPinStatus+0x174>
    15f0:	5f c0       	rjmp	.+190    	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
					{
					case DIO_SET:   SET_BIT(PORTC_REG,A_DIOPin); break;
    15f2:	a5 e3       	ldi	r26, 0x35	; 53
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e5 e3       	ldi	r30, 0x35	; 53
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <MDIO_voidSetPinStatus+0x192>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <MDIO_voidSetPinStatus+0x18e>
    1614:	84 2b       	or	r24, r20
    1616:	8c 93       	st	X, r24
    1618:	4b c0       	rjmp	.+150    	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
					case DIO_RESET: CLR_BIT(PORTC_REG,A_DIOPin); break;
    161a:	a5 e3       	ldi	r26, 0x35	; 53
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e5 e3       	ldi	r30, 0x35	; 53
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <MDIO_voidSetPinStatus+0x1ba>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <MDIO_voidSetPinStatus+0x1b6>
    163c:	80 95       	com	r24
    163e:	84 23       	and	r24, r20
    1640:	8c 93       	st	X, r24
    1642:	36 c0       	rjmp	.+108    	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
					}
					break;
		case PORTD:
					switch(A_PinStatus)
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	3d 83       	std	Y+5, r19	; 0x05
    164c:	2c 83       	std	Y+4, r18	; 0x04
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
    1650:	9d 81       	ldd	r25, Y+5	; 0x05
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	c9 f0       	breq	.+50     	; 0x1688 <MDIO_voidSetPinStatus+0x20a>
    1656:	2c 81       	ldd	r18, Y+4	; 0x04
    1658:	3d 81       	ldd	r19, Y+5	; 0x05
    165a:	21 30       	cpi	r18, 0x01	; 1
    165c:	31 05       	cpc	r19, r1
    165e:	41 f5       	brne	.+80     	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
					{
					case DIO_SET:   SET_BIT(PORTD_REG,A_DIOPin); break;
    1660:	a2 e3       	ldi	r26, 0x32	; 50
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e2 e3       	ldi	r30, 0x32	; 50
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	48 2f       	mov	r20, r24
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 2e       	mov	r0, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <MDIO_voidSetPinStatus+0x200>
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	0a 94       	dec	r0
    1680:	e2 f7       	brpl	.-8      	; 0x167a <MDIO_voidSetPinStatus+0x1fc>
    1682:	84 2b       	or	r24, r20
    1684:	8c 93       	st	X, r24
    1686:	14 c0       	rjmp	.+40     	; 0x16b0 <MDIO_voidSetPinStatus+0x232>
					case DIO_RESET: CLR_BIT(PORTD_REG,A_DIOPin); break;
    1688:	a2 e3       	ldi	r26, 0x32	; 50
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e2 e3       	ldi	r30, 0x32	; 50
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <MDIO_voidSetPinStatus+0x228>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <MDIO_voidSetPinStatus+0x224>
    16aa:	80 95       	com	r24
    16ac:	84 23       	and	r24, r20
    16ae:	8c 93       	st	X, r24
					}
					break;
		default: break;
		}
	}
}
    16b0:	2d 96       	adiw	r28, 0x0d	; 13
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (DIO_PORTS A_DIOPort, DIO_PINS A_DIOPin)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <MDIO_voidTogglePinValue+0x6>
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <MDIO_voidTogglePinValue+0x8>
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= PORTD)&&(A_DIOPin<=PIN7))
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	84 30       	cpi	r24, 0x04	; 4
    16d6:	08 f0       	brcs	.+2      	; 0x16da <MDIO_voidTogglePinValue+0x18>
    16d8:	72 c0       	rjmp	.+228    	; 0x17be <MDIO_voidTogglePinValue+0xfc>
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	88 30       	cpi	r24, 0x08	; 8
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <MDIO_voidTogglePinValue+0x20>
    16e0:	6e c0       	rjmp	.+220    	; 0x17be <MDIO_voidTogglePinValue+0xfc>
		{
			switch (A_DIOPort)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	3c 83       	std	Y+4, r19	; 0x04
    16ea:	2b 83       	std	Y+3, r18	; 0x03
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	91 05       	cpc	r25, r1
    16f4:	49 f1       	breq	.+82     	; 0x1748 <MDIO_voidTogglePinValue+0x86>
    16f6:	2b 81       	ldd	r18, Y+3	; 0x03
    16f8:	3c 81       	ldd	r19, Y+4	; 0x04
    16fa:	22 30       	cpi	r18, 0x02	; 2
    16fc:	31 05       	cpc	r19, r1
    16fe:	2c f4       	brge	.+10     	; 0x170a <MDIO_voidTogglePinValue+0x48>
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	61 f0       	breq	.+24     	; 0x1720 <MDIO_voidTogglePinValue+0x5e>
    1708:	5a c0       	rjmp	.+180    	; 0x17be <MDIO_voidTogglePinValue+0xfc>
    170a:	2b 81       	ldd	r18, Y+3	; 0x03
    170c:	3c 81       	ldd	r19, Y+4	; 0x04
    170e:	22 30       	cpi	r18, 0x02	; 2
    1710:	31 05       	cpc	r19, r1
    1712:	71 f1       	breq	.+92     	; 0x1770 <MDIO_voidTogglePinValue+0xae>
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	83 30       	cpi	r24, 0x03	; 3
    171a:	91 05       	cpc	r25, r1
    171c:	e9 f1       	breq	.+122    	; 0x1798 <MDIO_voidTogglePinValue+0xd6>
    171e:	4f c0       	rjmp	.+158    	; 0x17be <MDIO_voidTogglePinValue+0xfc>
			{
			case PORTA:
						TOGGLE_BIT(PORTA_REG,A_DIOPin);
    1720:	ab e3       	ldi	r26, 0x3B	; 59
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	eb e3       	ldi	r30, 0x3B	; 59
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <MDIO_voidTogglePinValue+0x7c>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <MDIO_voidTogglePinValue+0x78>
    1742:	84 27       	eor	r24, r20
    1744:	8c 93       	st	X, r24
    1746:	3b c0       	rjmp	.+118    	; 0x17be <MDIO_voidTogglePinValue+0xfc>
						break;
			case PORTB:
						TOGGLE_BIT(PORTB_REG,A_DIOPin);
    1748:	a8 e3       	ldi	r26, 0x38	; 56
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e8 e3       	ldi	r30, 0x38	; 56
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	48 2f       	mov	r20, r24
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	02 2e       	mov	r0, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <MDIO_voidTogglePinValue+0xa4>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	0a 94       	dec	r0
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <MDIO_voidTogglePinValue+0xa0>
    176a:	84 27       	eor	r24, r20
    176c:	8c 93       	st	X, r24
    176e:	27 c0       	rjmp	.+78     	; 0x17be <MDIO_voidTogglePinValue+0xfc>
						break;
			case PORTC:
						TOGGLE_BIT(PORTC_REG,A_DIOPin);
    1770:	a5 e3       	ldi	r26, 0x35	; 53
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e5 e3       	ldi	r30, 0x35	; 53
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	48 2f       	mov	r20, r24
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <MDIO_voidTogglePinValue+0xcc>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <MDIO_voidTogglePinValue+0xc8>
    1792:	84 27       	eor	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	13 c0       	rjmp	.+38     	; 0x17be <MDIO_voidTogglePinValue+0xfc>
						break;
			case PORTD:
						TOGGLE_BIT(PORTD_REG,A_DIOPin);
    1798:	a2 e3       	ldi	r26, 0x32	; 50
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e2 e3       	ldi	r30, 0x32	; 50
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 2e       	mov	r0, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <MDIO_voidTogglePinValue+0xf4>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <MDIO_voidTogglePinValue+0xf0>
    17ba:	84 27       	eor	r24, r20
    17bc:	8c 93       	st	X, r24
						break;
			default: break;
			}
		}
}
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <MDIO_PinStatusGetPinValue>:

PIN_STATUS MDIO_PinStatusGetPinValue (DIO_PORTS A_DIOPort, DIO_PINS A_DIOPin)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <MDIO_PinStatusGetPinValue+0x6>
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <MDIO_PinStatusGetPinValue+0x8>
    17d4:	0f 92       	push	r0
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	8a 83       	std	Y+2, r24	; 0x02
    17dc:	6b 83       	std	Y+3, r22	; 0x03
	PIN_STATUS PinValue;
	if ((A_DIOPort <= PORTD)&&(A_DIOPin<=PIN7))
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	84 30       	cpi	r24, 0x04	; 4
    17e2:	08 f0       	brcs	.+2      	; 0x17e6 <MDIO_PinStatusGetPinValue+0x1a>
    17e4:	6b c0       	rjmp	.+214    	; 0x18bc <MDIO_PinStatusGetPinValue+0xf0>
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	88 30       	cpi	r24, 0x08	; 8
    17ea:	08 f0       	brcs	.+2      	; 0x17ee <MDIO_PinStatusGetPinValue+0x22>
    17ec:	67 c0       	rjmp	.+206    	; 0x18bc <MDIO_PinStatusGetPinValue+0xf0>
	{
		switch (A_DIOPort)
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	3d 83       	std	Y+5, r19	; 0x05
    17f6:	2c 83       	std	Y+4, r18	; 0x04
    17f8:	4c 81       	ldd	r20, Y+4	; 0x04
    17fa:	5d 81       	ldd	r21, Y+5	; 0x05
    17fc:	41 30       	cpi	r20, 0x01	; 1
    17fe:	51 05       	cpc	r21, r1
    1800:	41 f1       	breq	.+80     	; 0x1852 <MDIO_PinStatusGetPinValue+0x86>
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	9d 81       	ldd	r25, Y+5	; 0x05
    1806:	82 30       	cpi	r24, 0x02	; 2
    1808:	91 05       	cpc	r25, r1
    180a:	34 f4       	brge	.+12     	; 0x1818 <MDIO_PinStatusGetPinValue+0x4c>
    180c:	2c 81       	ldd	r18, Y+4	; 0x04
    180e:	3d 81       	ldd	r19, Y+5	; 0x05
    1810:	21 15       	cp	r18, r1
    1812:	31 05       	cpc	r19, r1
    1814:	61 f0       	breq	.+24     	; 0x182e <MDIO_PinStatusGetPinValue+0x62>
    1816:	52 c0       	rjmp	.+164    	; 0x18bc <MDIO_PinStatusGetPinValue+0xf0>
    1818:	4c 81       	ldd	r20, Y+4	; 0x04
    181a:	5d 81       	ldd	r21, Y+5	; 0x05
    181c:	42 30       	cpi	r20, 0x02	; 2
    181e:	51 05       	cpc	r21, r1
    1820:	51 f1       	breq	.+84     	; 0x1876 <MDIO_PinStatusGetPinValue+0xaa>
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	9d 81       	ldd	r25, Y+5	; 0x05
    1826:	83 30       	cpi	r24, 0x03	; 3
    1828:	91 05       	cpc	r25, r1
    182a:	b9 f1       	breq	.+110    	; 0x189a <MDIO_PinStatusGetPinValue+0xce>
    182c:	47 c0       	rjmp	.+142    	; 0x18bc <MDIO_PinStatusGetPinValue+0xf0>
		{
		case PORTA:
			PinValue = GET_BIT(PINA_REG,A_DIOPin);
    182e:	e9 e3       	ldi	r30, 0x39	; 57
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	a9 01       	movw	r20, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <MDIO_PinStatusGetPinValue+0x7a>
    1842:	55 95       	asr	r21
    1844:	47 95       	ror	r20
    1846:	8a 95       	dec	r24
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <MDIO_PinStatusGetPinValue+0x76>
    184a:	ca 01       	movw	r24, r20
    184c:	81 70       	andi	r24, 0x01	; 1
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	35 c0       	rjmp	.+106    	; 0x18bc <MDIO_PinStatusGetPinValue+0xf0>
					break;
		case PORTB:
			PinValue = GET_BIT(PINB_REG,A_DIOPin);
    1852:	e6 e3       	ldi	r30, 0x36	; 54
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a9 01       	movw	r20, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <MDIO_PinStatusGetPinValue+0x9e>
    1866:	55 95       	asr	r21
    1868:	47 95       	ror	r20
    186a:	8a 95       	dec	r24
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <MDIO_PinStatusGetPinValue+0x9a>
    186e:	ca 01       	movw	r24, r20
    1870:	81 70       	andi	r24, 0x01	; 1
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	23 c0       	rjmp	.+70     	; 0x18bc <MDIO_PinStatusGetPinValue+0xf0>
					break;
		case PORTC:
			PinValue = GET_BIT(PINC_REG,A_DIOPin);
    1876:	e3 e3       	ldi	r30, 0x33	; 51
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a9 01       	movw	r20, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <MDIO_PinStatusGetPinValue+0xc2>
    188a:	55 95       	asr	r21
    188c:	47 95       	ror	r20
    188e:	8a 95       	dec	r24
    1890:	e2 f7       	brpl	.-8      	; 0x188a <MDIO_PinStatusGetPinValue+0xbe>
    1892:	ca 01       	movw	r24, r20
    1894:	81 70       	andi	r24, 0x01	; 1
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	11 c0       	rjmp	.+34     	; 0x18bc <MDIO_PinStatusGetPinValue+0xf0>
					break;
		case PORTD:
			PinValue = GET_BIT(PIND_REG,A_DIOPin);
    189a:	e0 e3       	ldi	r30, 0x30	; 48
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	88 2f       	mov	r24, r24
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	a9 01       	movw	r20, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <MDIO_PinStatusGetPinValue+0xe6>
    18ae:	55 95       	asr	r21
    18b0:	47 95       	ror	r20
    18b2:	8a 95       	dec	r24
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <MDIO_PinStatusGetPinValue+0xe2>
    18b6:	ca 01       	movw	r24, r20
    18b8:	81 70       	andi	r24, 0x01	; 1
    18ba:	89 83       	std	Y+1, r24	; 0x01
					break;
		default: break;
		}
	}
	return PinValue;
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection (DIO_PORTS A_DIOPort, u8 A_u8PortDirection)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <MDIO_voidSetPortDirection+0x6>
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <MDIO_voidSetPortDirection+0x8>
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= PORTD))
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	84 30       	cpi	r24, 0x04	; 4
    18e2:	90 f5       	brcc	.+100    	; 0x1948 <MDIO_voidSetPortDirection+0x7a>
	{
		switch (A_DIOPort)
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	3c 83       	std	Y+4, r19	; 0x04
    18ec:	2b 83       	std	Y+3, r18	; 0x03
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	91 05       	cpc	r25, r1
    18f6:	d1 f0       	breq	.+52     	; 0x192c <MDIO_voidSetPortDirection+0x5e>
    18f8:	2b 81       	ldd	r18, Y+3	; 0x03
    18fa:	3c 81       	ldd	r19, Y+4	; 0x04
    18fc:	22 30       	cpi	r18, 0x02	; 2
    18fe:	31 05       	cpc	r19, r1
    1900:	2c f4       	brge	.+10     	; 0x190c <MDIO_voidSetPortDirection+0x3e>
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	9c 81       	ldd	r25, Y+4	; 0x04
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	61 f0       	breq	.+24     	; 0x1922 <MDIO_voidSetPortDirection+0x54>
    190a:	1e c0       	rjmp	.+60     	; 0x1948 <MDIO_voidSetPortDirection+0x7a>
    190c:	2b 81       	ldd	r18, Y+3	; 0x03
    190e:	3c 81       	ldd	r19, Y+4	; 0x04
    1910:	22 30       	cpi	r18, 0x02	; 2
    1912:	31 05       	cpc	r19, r1
    1914:	81 f0       	breq	.+32     	; 0x1936 <MDIO_voidSetPortDirection+0x68>
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	83 30       	cpi	r24, 0x03	; 3
    191c:	91 05       	cpc	r25, r1
    191e:	81 f0       	breq	.+32     	; 0x1940 <MDIO_voidSetPortDirection+0x72>
    1920:	13 c0       	rjmp	.+38     	; 0x1948 <MDIO_voidSetPortDirection+0x7a>
		{
		case PORTA:
					DDRA_REG = A_u8PortDirection;
    1922:	ea e3       	ldi	r30, 0x3A	; 58
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	80 83       	st	Z, r24
    192a:	0e c0       	rjmp	.+28     	; 0x1948 <MDIO_voidSetPortDirection+0x7a>
					break;
		case PORTB:
					DDRB_REG = A_u8PortDirection;
    192c:	e7 e3       	ldi	r30, 0x37	; 55
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	80 83       	st	Z, r24
    1934:	09 c0       	rjmp	.+18     	; 0x1948 <MDIO_voidSetPortDirection+0x7a>
					break;
		case PORTC:
					DDRC_REG = A_u8PortDirection;
    1936:	e4 e3       	ldi	r30, 0x34	; 52
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	80 83       	st	Z, r24
    193e:	04 c0       	rjmp	.+8      	; 0x1948 <MDIO_voidSetPortDirection+0x7a>
					break;
		case PORTD:
					DDRD_REG = A_u8PortDirection;
    1940:	e1 e3       	ldi	r30, 0x31	; 49
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	80 83       	st	Z, r24
					break;
		default: break;
		}
	}
}
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <MDIO_voidSetPortValue>:
void MDIO_voidSetPortValue (DIO_PORTS A_DIOPort, u8 A_u8PortValue)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <MDIO_voidSetPortValue+0x6>
    195c:	00 d0       	rcall	.+0      	; 0x195e <MDIO_voidSetPortValue+0x8>
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= PORTD))
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	84 30       	cpi	r24, 0x04	; 4
    196a:	90 f5       	brcc	.+100    	; 0x19d0 <MDIO_voidSetPortValue+0x7a>
	{
		switch (A_DIOPort)
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	3c 83       	std	Y+4, r19	; 0x04
    1974:	2b 83       	std	Y+3, r18	; 0x03
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	91 05       	cpc	r25, r1
    197e:	d1 f0       	breq	.+52     	; 0x19b4 <MDIO_voidSetPortValue+0x5e>
    1980:	2b 81       	ldd	r18, Y+3	; 0x03
    1982:	3c 81       	ldd	r19, Y+4	; 0x04
    1984:	22 30       	cpi	r18, 0x02	; 2
    1986:	31 05       	cpc	r19, r1
    1988:	2c f4       	brge	.+10     	; 0x1994 <MDIO_voidSetPortValue+0x3e>
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	9c 81       	ldd	r25, Y+4	; 0x04
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	61 f0       	breq	.+24     	; 0x19aa <MDIO_voidSetPortValue+0x54>
    1992:	1e c0       	rjmp	.+60     	; 0x19d0 <MDIO_voidSetPortValue+0x7a>
    1994:	2b 81       	ldd	r18, Y+3	; 0x03
    1996:	3c 81       	ldd	r19, Y+4	; 0x04
    1998:	22 30       	cpi	r18, 0x02	; 2
    199a:	31 05       	cpc	r19, r1
    199c:	81 f0       	breq	.+32     	; 0x19be <MDIO_voidSetPortValue+0x68>
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	83 30       	cpi	r24, 0x03	; 3
    19a4:	91 05       	cpc	r25, r1
    19a6:	81 f0       	breq	.+32     	; 0x19c8 <MDIO_voidSetPortValue+0x72>
    19a8:	13 c0       	rjmp	.+38     	; 0x19d0 <MDIO_voidSetPortValue+0x7a>
		{
		case PORTA:
					PORTA_REG = A_u8PortValue;
    19aa:	eb e3       	ldi	r30, 0x3B	; 59
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	80 83       	st	Z, r24
    19b2:	0e c0       	rjmp	.+28     	; 0x19d0 <MDIO_voidSetPortValue+0x7a>
					break;
		case PORTB:
					PORTB_REG = A_u8PortValue;
    19b4:	e8 e3       	ldi	r30, 0x38	; 56
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	80 83       	st	Z, r24
    19bc:	09 c0       	rjmp	.+18     	; 0x19d0 <MDIO_voidSetPortValue+0x7a>
					break;
		case PORTC:
					PORTC_REG = A_u8PortValue;
    19be:	e5 e3       	ldi	r30, 0x35	; 53
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	80 83       	st	Z, r24
    19c6:	04 c0       	rjmp	.+8      	; 0x19d0 <MDIO_voidSetPortValue+0x7a>
					break;
		case PORTD:
					PORTD_REG = A_u8PortValue;
    19c8:	e2 e3       	ldi	r30, 0x32	; 50
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	80 83       	st	Z, r24
					break;
		default: break;
		}
	}
}
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <write_low_nibble>:

void write_low_nibble(DIO_PORTS portname,BcdNumbers value)
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <write_low_nibble+0x6>
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <write_low_nibble+0x8>
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	8f 70       	andi	r24, 0x0F	; 15
    19f2:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	3c 83       	std	Y+4, r19	; 0x04
    19fc:	2b 83       	std	Y+3, r18	; 0x03
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	9c 81       	ldd	r25, Y+4	; 0x04
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	91 05       	cpc	r25, r1
    1a06:	29 f1       	breq	.+74     	; 0x1a52 <write_low_nibble+0x74>
    1a08:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0c:	22 30       	cpi	r18, 0x02	; 2
    1a0e:	31 05       	cpc	r19, r1
    1a10:	2c f4       	brge	.+10     	; 0x1a1c <write_low_nibble+0x3e>
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	61 f0       	breq	.+24     	; 0x1a32 <write_low_nibble+0x54>
    1a1a:	4a c0       	rjmp	.+148    	; 0x1ab0 <write_low_nibble+0xd2>
    1a1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a20:	22 30       	cpi	r18, 0x02	; 2
    1a22:	31 05       	cpc	r19, r1
    1a24:	31 f1       	breq	.+76     	; 0x1a72 <write_low_nibble+0x94>
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2a:	83 30       	cpi	r24, 0x03	; 3
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	89 f1       	breq	.+98     	; 0x1a92 <write_low_nibble+0xb4>
    1a30:	3f c0       	rjmp	.+126    	; 0x1ab0 <write_low_nibble+0xd2>
	{
		case PORTA:
			PORTA_REG&=0xf0;
    1a32:	ab e3       	ldi	r26, 0x3B	; 59
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	eb e3       	ldi	r30, 0x3B	; 59
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	80 7f       	andi	r24, 0xF0	; 240
    1a3e:	8c 93       	st	X, r24
			PORTA_REG|=value;
    1a40:	ab e3       	ldi	r26, 0x3B	; 59
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	eb e3       	ldi	r30, 0x3B	; 59
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	90 81       	ld	r25, Z
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	89 2b       	or	r24, r25
    1a4e:	8c 93       	st	X, r24
    1a50:	2f c0       	rjmp	.+94     	; 0x1ab0 <write_low_nibble+0xd2>
			break;
		case PORTB:
			PORTB_REG&=0xf0;
    1a52:	a8 e3       	ldi	r26, 0x38	; 56
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e8 e3       	ldi	r30, 0x38	; 56
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	80 7f       	andi	r24, 0xF0	; 240
    1a5e:	8c 93       	st	X, r24
			PORTB_REG|=value;
    1a60:	a8 e3       	ldi	r26, 0x38	; 56
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e8 e3       	ldi	r30, 0x38	; 56
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	90 81       	ld	r25, Z
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	89 2b       	or	r24, r25
    1a6e:	8c 93       	st	X, r24
    1a70:	1f c0       	rjmp	.+62     	; 0x1ab0 <write_low_nibble+0xd2>
			break;
		case PORTC:
			PORTC_REG&=0xf0;
    1a72:	a5 e3       	ldi	r26, 0x35	; 53
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e5 e3       	ldi	r30, 0x35	; 53
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	80 7f       	andi	r24, 0xF0	; 240
    1a7e:	8c 93       	st	X, r24
			PORTC_REG|=value;
    1a80:	a5 e3       	ldi	r26, 0x35	; 53
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e5 e3       	ldi	r30, 0x35	; 53
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	90 81       	ld	r25, Z
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	89 2b       	or	r24, r25
    1a8e:	8c 93       	st	X, r24
    1a90:	0f c0       	rjmp	.+30     	; 0x1ab0 <write_low_nibble+0xd2>
			break;
		case PORTD:
			PORTD_REG&=0xf0;
    1a92:	a2 e3       	ldi	r26, 0x32	; 50
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e2 e3       	ldi	r30, 0x32	; 50
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	80 7f       	andi	r24, 0xF0	; 240
    1a9e:	8c 93       	st	X, r24
			PORTD_REG|=value;
    1aa0:	a2 e3       	ldi	r26, 0x32	; 50
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e2 e3       	ldi	r30, 0x32	; 50
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	90 81       	ld	r25, Z
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	89 2b       	or	r24, r25
    1aae:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <write_high_nibble>:


void write_high_nibble(DIO_PORTS portname,BcdNumbers value)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <write_high_nibble+0x6>
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <write_high_nibble+0x8>
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	82 95       	swap	r24
    1ad2:	80 7f       	andi	r24, 0xF0	; 240
    1ad4:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	3c 83       	std	Y+4, r19	; 0x04
    1ade:	2b 83       	std	Y+3, r18	; 0x03
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	29 f1       	breq	.+74     	; 0x1b34 <write_high_nibble+0x76>
    1aea:	2b 81       	ldd	r18, Y+3	; 0x03
    1aec:	3c 81       	ldd	r19, Y+4	; 0x04
    1aee:	22 30       	cpi	r18, 0x02	; 2
    1af0:	31 05       	cpc	r19, r1
    1af2:	2c f4       	brge	.+10     	; 0x1afe <write_high_nibble+0x40>
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	61 f0       	breq	.+24     	; 0x1b14 <write_high_nibble+0x56>
    1afc:	4a c0       	rjmp	.+148    	; 0x1b92 <write_high_nibble+0xd4>
    1afe:	2b 81       	ldd	r18, Y+3	; 0x03
    1b00:	3c 81       	ldd	r19, Y+4	; 0x04
    1b02:	22 30       	cpi	r18, 0x02	; 2
    1b04:	31 05       	cpc	r19, r1
    1b06:	31 f1       	breq	.+76     	; 0x1b54 <write_high_nibble+0x96>
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	83 30       	cpi	r24, 0x03	; 3
    1b0e:	91 05       	cpc	r25, r1
    1b10:	89 f1       	breq	.+98     	; 0x1b74 <write_high_nibble+0xb6>
    1b12:	3f c0       	rjmp	.+126    	; 0x1b92 <write_high_nibble+0xd4>
	{
		case PORTA:
			PORTA_REG&=0x0f;
    1b14:	ab e3       	ldi	r26, 0x3B	; 59
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	eb e3       	ldi	r30, 0x3B	; 59
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	8f 70       	andi	r24, 0x0F	; 15
    1b20:	8c 93       	st	X, r24
			PORTA_REG|=value;
    1b22:	ab e3       	ldi	r26, 0x3B	; 59
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	eb e3       	ldi	r30, 0x3B	; 59
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	90 81       	ld	r25, Z
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	89 2b       	or	r24, r25
    1b30:	8c 93       	st	X, r24
    1b32:	2f c0       	rjmp	.+94     	; 0x1b92 <write_high_nibble+0xd4>
			break;
		case PORTB:
			PORTB_REG&=0x0f;
    1b34:	a8 e3       	ldi	r26, 0x38	; 56
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e8 e3       	ldi	r30, 0x38	; 56
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	8f 70       	andi	r24, 0x0F	; 15
    1b40:	8c 93       	st	X, r24
			PORTB_REG|=value;
    1b42:	a8 e3       	ldi	r26, 0x38	; 56
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e8 e3       	ldi	r30, 0x38	; 56
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	90 81       	ld	r25, Z
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	89 2b       	or	r24, r25
    1b50:	8c 93       	st	X, r24
    1b52:	1f c0       	rjmp	.+62     	; 0x1b92 <write_high_nibble+0xd4>
			break;
		case PORTC:
			PORTC_REG&=0x0f;
    1b54:	a5 e3       	ldi	r26, 0x35	; 53
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e5 e3       	ldi	r30, 0x35	; 53
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8f 70       	andi	r24, 0x0F	; 15
    1b60:	8c 93       	st	X, r24
			PORTC_REG|=value;
    1b62:	a5 e3       	ldi	r26, 0x35	; 53
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e5 e3       	ldi	r30, 0x35	; 53
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	90 81       	ld	r25, Z
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	89 2b       	or	r24, r25
    1b70:	8c 93       	st	X, r24
    1b72:	0f c0       	rjmp	.+30     	; 0x1b92 <write_high_nibble+0xd4>
			break;
		case PORTD:
			PORTD_REG&=0x0f;
    1b74:	a2 e3       	ldi	r26, 0x32	; 50
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e2 e3       	ldi	r30, 0x32	; 50
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	8f 70       	andi	r24, 0x0F	; 15
    1b80:	8c 93       	st	X, r24
			PORTD_REG|=value;
    1b82:	a2 e3       	ldi	r26, 0x32	; 50
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e2 e3       	ldi	r30, 0x32	; 50
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	90 81       	ld	r25, Z
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	89 2b       	or	r24, r25
    1b90:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <EEPROM_voidSendDataByte>:
#include "../Include/HAL/EEPROM/EEPROM_config.h"
#include "../Include/HAL/EEPROM/EEPROM_private.h"
#include "../Include/MCAL/DIO/DIO_Interface.h"

void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	62 97       	sbiw	r28, 0x12	; 18
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	99 8b       	std	Y+17, r25	; 0x11
    1bb6:	88 8b       	std	Y+16, r24	; 0x10
    1bb8:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8AddressPacket;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    1bba:	88 89       	ldd	r24, Y+16	; 0x10
    1bbc:	99 89       	ldd	r25, Y+17	; 0x11
    1bbe:	89 2f       	mov	r24, r25
    1bc0:	99 27       	eor	r25, r25
    1bc2:	80 65       	ori	r24, 0x50	; 80
    1bc4:	8f 87       	std	Y+15, r24	; 0x0f
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    1bc6:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    1bca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bcc:	0e 94 30 13 	call	0x2660	; 0x2660 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    1bd0:	88 89       	ldd	r24, Y+16	; 0x10
    1bd2:	0e 94 a3 13 	call	0x2746	; 0x2746 <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send the data byte to the memory location*/
	TWI_ErrorStatusMasterWriteDataByteWithACK(Copy_u8DataByte);
    1bd6:	8a 89       	ldd	r24, Y+18	; 0x12
    1bd8:	0e 94 a3 13 	call	0x2746	; 0x2746 <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send stop condition*/
	TWI_voidSendStopCondition();
    1bdc:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <TWI_voidSendStopCondition>
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a0 e2       	ldi	r26, 0x20	; 32
    1be6:	b1 e4       	ldi	r27, 0x41	; 65
    1be8:	8b 87       	std	Y+11, r24	; 0x0b
    1bea:	9c 87       	std	Y+12, r25	; 0x0c
    1bec:	ad 87       	std	Y+13, r26	; 0x0d
    1bee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a e7       	ldi	r20, 0x7A	; 122
    1bfe:	53 e4       	ldi	r21, 0x43	; 67
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	8f 83       	std	Y+7, r24	; 0x07
    1c0a:	98 87       	std	Y+8, r25	; 0x08
    1c0c:	a9 87       	std	Y+9, r26	; 0x09
    1c0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c10:	6f 81       	ldd	r22, Y+7	; 0x07
    1c12:	78 85       	ldd	r23, Y+8	; 0x08
    1c14:	89 85       	ldd	r24, Y+9	; 0x09
    1c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	3f c0       	rjmp	.+126    	; 0x1cb0 <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    1c32:	6f 81       	ldd	r22, Y+7	; 0x07
    1c34:	78 85       	ldd	r23, Y+8	; 0x08
    1c36:	89 85       	ldd	r24, Y+9	; 0x09
    1c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	4c f5       	brge	.+82     	; 0x1c9c <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9e 83       	std	Y+6, r25	; 0x06
    1c70:	8d 83       	std	Y+5, r24	; 0x05
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <EEPROM_voidSendDataByte+0xf2>
    1c74:	89 e1       	ldi	r24, 0x19	; 25
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9c 83       	std	Y+4, r25	; 0x04
    1c7a:	8b 83       	std	Y+3, r24	; 0x03
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <EEPROM_voidSendDataByte+0xe0>
    1c84:	9c 83       	std	Y+4, r25	; 0x04
    1c86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	9e 83       	std	Y+6, r25	; 0x06
    1c90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	8d 81       	ldd	r24, Y+5	; 0x05
    1c94:	9e 81       	ldd	r25, Y+6	; 0x06
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f7       	brne	.-38     	; 0x1c74 <EEPROM_voidSendDataByte+0xd4>
    1c9a:	14 c0       	rjmp	.+40     	; 0x1cc4 <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	9e 83       	std	Y+6, r25	; 0x06
    1cae:	8d 83       	std	Y+5, r24	; 0x05
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <EEPROM_voidSendDataByte+0x11c>
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}
    1cc4:	62 96       	adiw	r28, 0x12	; 18
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <EEPROM_u8ReadDataByte+0x6>
    1cdc:	00 d0       	rcall	.+0      	; 0x1cde <EEPROM_u8ReadDataByte+0x8>
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	9c 83       	std	Y+4, r25	; 0x04
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8AddressPacket, Local_u8Data;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cea:	89 2f       	mov	r24, r25
    1cec:	99 27       	eor	r25, r25
    1cee:	80 65       	ori	r24, 0x50	; 80
    1cf0:	89 83       	std	Y+1, r24	; 0x01
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    1cf2:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet with write request*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	0e 94 30 13 	call	0x2660	; 0x2660 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	0e 94 a3 13 	call	0x2746	; 0x2746 <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send repeated start to change write request into read request*/
	TWI_ErrorStatusSendRepeatedStartConditionWithACK();
    1d02:	0e 94 0d 13 	call	0x261a	; 0x261a <TWI_ErrorStatusSendRepeatedStartConditionWithACK>

	/*Send the address packet with read request*/
	TWI_ErrorStatusSendSlaveAddressWithReadACK(Local_u8AddressPacket);
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <TWI_ErrorStatusSendSlaveAddressWithReadACK>
	
	/*Get the data from memory*/
	TWI_ErrorStatusMasterReadDataByteWithACK(&Local_u8Data);
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	02 96       	adiw	r24, 0x02	; 2
    1d10:	0e 94 cc 13 	call	0x2798	; 0x2798 <TWI_ErrorStatusMasterReadDataByteWithACK>

	/*send the stop condition*/
	TWI_voidSendStopCondition();
    1d14:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <TWI_voidSendStopCondition>

	return Local_u8Data;
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <MEXTI_voidConfig>:
void(*EXTI2_Callback)(void) = NULL;
/************************************************************************************************/
/*										EXTI IMPLEMENTATION										*/
/************************************************************************************************/
void MEXTI_voidConfig (EXTI_ID A_EXTI_ID, EXTI_SENSE_MODE A_EXTI_SENSE_MODE)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <MEXTI_voidConfig+0x6>
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <MEXTI_voidConfig+0x8>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <MEXTI_voidConfig+0xa>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ((A_EXTI_ID<= EXTI2) && (A_EXTI_SENSE_MODE <= RISING_EDGE))
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	83 30       	cpi	r24, 0x03	; 3
    1d3e:	08 f0       	brcs	.+2      	; 0x1d42 <MEXTI_voidConfig+0x1a>
    1d40:	5e c0       	rjmp	.+188    	; 0x1dfe <MEXTI_voidConfig+0xd6>
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	84 30       	cpi	r24, 0x04	; 4
    1d46:	08 f0       	brcs	.+2      	; 0x1d4a <MEXTI_voidConfig+0x22>
    1d48:	5a c0       	rjmp	.+180    	; 0x1dfe <MEXTI_voidConfig+0xd6>
	{
		switch (A_EXTI_ID)
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	3e 83       	std	Y+6, r19	; 0x06
    1d52:	2d 83       	std	Y+5, r18	; 0x05
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	d1 f0       	breq	.+52     	; 0x1d92 <MEXTI_voidConfig+0x6a>
    1d5e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d60:	3e 81       	ldd	r19, Y+6	; 0x06
    1d62:	22 30       	cpi	r18, 0x02	; 2
    1d64:	31 05       	cpc	r19, r1
    1d66:	61 f1       	breq	.+88     	; 0x1dc0 <MEXTI_voidConfig+0x98>
    1d68:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <MEXTI_voidConfig+0x4a>
    1d70:	46 c0       	rjmp	.+140    	; 0x1dfe <MEXTI_voidConfig+0xd6>
		{
		case EXTI0:
					//Clear First Two Bits of Sense mode of INT0
					MCUCR &= ~(SENSE_MODE_MASK << EXTI0_SENSE_MODE_BITS);
    1d72:	a5 e5       	ldi	r26, 0x55	; 85
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e5 e5       	ldi	r30, 0x55	; 85
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8c 7f       	andi	r24, 0xFC	; 252
    1d7e:	8c 93       	st	X, r24
					//Set First Two Bits of Sense mode of INT0 with the sense mode value
					MCUCR |= (A_EXTI_SENSE_MODE << EXTI0_SENSE_MODE_BITS);
    1d80:	a5 e5       	ldi	r26, 0x55	; 85
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e5 e5       	ldi	r30, 0x55	; 85
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	90 81       	ld	r25, Z
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	89 2b       	or	r24, r25
    1d8e:	8c 93       	st	X, r24
    1d90:	36 c0       	rjmp	.+108    	; 0x1dfe <MEXTI_voidConfig+0xd6>
					break;
		case EXTI1:
					//Clear First Two Bits of Sense mode of INT1
					MCUCR &= ~(SENSE_MODE_MASK << EXTI1_SENSE_MODE_BITS);
    1d92:	a5 e5       	ldi	r26, 0x55	; 85
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e5 e5       	ldi	r30, 0x55	; 85
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	83 7f       	andi	r24, 0xF3	; 243
    1d9e:	8c 93       	st	X, r24
					//Set First Two Bits of Sense mode of INT1 with the sense mode value
					MCUCR |= (A_EXTI_SENSE_MODE << EXTI1_SENSE_MODE_BITS);
    1da0:	a5 e5       	ldi	r26, 0x55	; 85
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e5 e5       	ldi	r30, 0x55	; 85
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	28 2f       	mov	r18, r24
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	82 2b       	or	r24, r18
    1dbc:	8c 93       	st	X, r24
    1dbe:	1f c0       	rjmp	.+62     	; 0x1dfe <MEXTI_voidConfig+0xd6>
					break;
		case EXTI2:
					switch (A_EXTI_SENSE_MODE)
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	3c 83       	std	Y+4, r19	; 0x04
    1dc8:	2b 83       	std	Y+3, r18	; 0x03
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	82 30       	cpi	r24, 0x02	; 2
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	31 f0       	breq	.+12     	; 0x1de0 <MEXTI_voidConfig+0xb8>
    1dd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd8:	23 30       	cpi	r18, 0x03	; 3
    1dda:	31 05       	cpc	r19, r1
    1ddc:	49 f0       	breq	.+18     	; 0x1df0 <MEXTI_voidConfig+0xc8>
    1dde:	0f c0       	rjmp	.+30     	; 0x1dfe <MEXTI_voidConfig+0xd6>
					{
						case FALLING_EDGE: CLR_BIT(MCUCSR,EXTI2_SENSE_MODE_BITS); break;
    1de0:	a4 e5       	ldi	r26, 0x54	; 84
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e4 e5       	ldi	r30, 0x54	; 84
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	8f 7b       	andi	r24, 0xBF	; 191
    1dec:	8c 93       	st	X, r24
    1dee:	07 c0       	rjmp	.+14     	; 0x1dfe <MEXTI_voidConfig+0xd6>
						case RISING_EDGE:  SET_BIT(MCUCSR,EXTI2_SENSE_MODE_BITS); break;
    1df0:	a4 e5       	ldi	r26, 0x54	; 84
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e4 e5       	ldi	r30, 0x54	; 84
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	80 64       	ori	r24, 0x40	; 64
    1dfc:	8c 93       	st	X, r24
						case ON_CHANGE  :	break;
					}
					break;
		}
	}
}
    1dfe:	26 96       	adiw	r28, 0x06	; 6
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <MEXTI_voidEnable>:
/************************************************************************************************/
void MEXTI_voidEnable(EXTI_ID A_EXTI_ID)
{
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <MEXTI_voidEnable+0x6>
    1e16:	0f 92       	push	r0
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	89 83       	std	Y+1, r24	; 0x01
	//Input Validation
	if ((A_EXTI_ID <= EXTI2))
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	83 30       	cpi	r24, 0x03	; 3
    1e22:	50 f5       	brcc	.+84     	; 0x1e78 <MEXTI_voidEnable+0x68>
	{
		switch (A_EXTI_ID)
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	3b 83       	std	Y+3, r19	; 0x03
    1e2c:	2a 83       	std	Y+2, r18	; 0x02
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	9b 81       	ldd	r25, Y+3	; 0x03
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	91 05       	cpc	r25, r1
    1e36:	89 f0       	breq	.+34     	; 0x1e5a <MEXTI_voidEnable+0x4a>
    1e38:	2a 81       	ldd	r18, Y+2	; 0x02
    1e3a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e3c:	22 30       	cpi	r18, 0x02	; 2
    1e3e:	31 05       	cpc	r19, r1
    1e40:	a1 f0       	breq	.+40     	; 0x1e6a <MEXTI_voidEnable+0x5a>
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	9b 81       	ldd	r25, Y+3	; 0x03
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	b9 f4       	brne	.+46     	; 0x1e78 <MEXTI_voidEnable+0x68>
		{
			case EXTI0:	SET_BIT(GICR,EXTI0_ENABLE_BIT);	break;
    1e4a:	ab e5       	ldi	r26, 0x5B	; 91
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	eb e5       	ldi	r30, 0x5B	; 91
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	80 64       	ori	r24, 0x40	; 64
    1e56:	8c 93       	st	X, r24
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <MEXTI_voidEnable+0x68>
			case EXTI1:	SET_BIT(GICR,EXTI1_ENABLE_BIT);	break;
    1e5a:	ab e5       	ldi	r26, 0x5B	; 91
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	eb e5       	ldi	r30, 0x5B	; 91
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	80 68       	ori	r24, 0x80	; 128
    1e66:	8c 93       	st	X, r24
    1e68:	07 c0       	rjmp	.+14     	; 0x1e78 <MEXTI_voidEnable+0x68>
			case EXTI2:	SET_BIT(GICR,EXTI2_ENABLE_BIT);	break;
    1e6a:	ab e5       	ldi	r26, 0x5B	; 91
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	eb e5       	ldi	r30, 0x5B	; 91
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	80 62       	ori	r24, 0x20	; 32
    1e76:	8c 93       	st	X, r24
		}
	}
}
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <MEXTI_voidDisable>:
/************************************************************************************************/
void MEXTI_voidDisable(EXTI_ID A_EXTI_ID)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <MEXTI_voidDisable+0x6>
    1e8a:	0f 92       	push	r0
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	89 83       	std	Y+1, r24	; 0x01
	//Input Validation
	if ((A_EXTI_ID <= EXTI2))
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	83 30       	cpi	r24, 0x03	; 3
    1e96:	50 f5       	brcc	.+84     	; 0x1eec <MEXTI_voidDisable+0x68>
	{
		switch (A_EXTI_ID)
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	3b 83       	std	Y+3, r19	; 0x03
    1ea0:	2a 83       	std	Y+2, r18	; 0x02
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea6:	81 30       	cpi	r24, 0x01	; 1
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	89 f0       	breq	.+34     	; 0x1ece <MEXTI_voidDisable+0x4a>
    1eac:	2a 81       	ldd	r18, Y+2	; 0x02
    1eae:	3b 81       	ldd	r19, Y+3	; 0x03
    1eb0:	22 30       	cpi	r18, 0x02	; 2
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	a1 f0       	breq	.+40     	; 0x1ede <MEXTI_voidDisable+0x5a>
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	b9 f4       	brne	.+46     	; 0x1eec <MEXTI_voidDisable+0x68>
		{
			case EXTI0:	CLR_BIT(GICR,EXTI0_ENABLE_BIT);	break;
    1ebe:	ab e5       	ldi	r26, 0x5B	; 91
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	eb e5       	ldi	r30, 0x5B	; 91
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	8f 7b       	andi	r24, 0xBF	; 191
    1eca:	8c 93       	st	X, r24
    1ecc:	0f c0       	rjmp	.+30     	; 0x1eec <MEXTI_voidDisable+0x68>
			case EXTI1:	CLR_BIT(GICR,EXTI1_ENABLE_BIT);	break;
    1ece:	ab e5       	ldi	r26, 0x5B	; 91
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	eb e5       	ldi	r30, 0x5B	; 91
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	8f 77       	andi	r24, 0x7F	; 127
    1eda:	8c 93       	st	X, r24
    1edc:	07 c0       	rjmp	.+14     	; 0x1eec <MEXTI_voidDisable+0x68>
			case EXTI2:	CLR_BIT(GICR,EXTI2_ENABLE_BIT);	break;
    1ede:	ab e5       	ldi	r26, 0x5B	; 91
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	eb e5       	ldi	r30, 0x5B	; 91
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	8f 7d       	andi	r24, 0xDF	; 223
    1eea:	8c 93       	st	X, r24
		}
	}
}
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <MEXTI_voidClearFlag>:
/************************************************************************************************/
void MEXTI_voidClearFlag (EXTI_ID A_EXTI_ID)
{
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <MEXTI_voidClearFlag+0x6>
    1efe:	0f 92       	push	r0
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	89 83       	std	Y+1, r24	; 0x01
	//Input Validation
	if ((A_EXTI_ID <= EXTI2))
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	83 30       	cpi	r24, 0x03	; 3
    1f0a:	50 f5       	brcc	.+84     	; 0x1f60 <MEXTI_voidClearFlag+0x68>
	{
		switch (A_EXTI_ID)
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	3b 83       	std	Y+3, r19	; 0x03
    1f14:	2a 83       	std	Y+2, r18	; 0x02
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1a:	81 30       	cpi	r24, 0x01	; 1
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	89 f0       	breq	.+34     	; 0x1f42 <MEXTI_voidClearFlag+0x4a>
    1f20:	2a 81       	ldd	r18, Y+2	; 0x02
    1f22:	3b 81       	ldd	r19, Y+3	; 0x03
    1f24:	22 30       	cpi	r18, 0x02	; 2
    1f26:	31 05       	cpc	r19, r1
    1f28:	a1 f0       	breq	.+40     	; 0x1f52 <MEXTI_voidClearFlag+0x5a>
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	b9 f4       	brne	.+46     	; 0x1f60 <MEXTI_voidClearFlag+0x68>
		{
			case EXTI0:	SET_BIT(GIFR,EXTI0_FLAG_BIT);	break;
    1f32:	aa e5       	ldi	r26, 0x5A	; 90
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	ea e5       	ldi	r30, 0x5A	; 90
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	80 64       	ori	r24, 0x40	; 64
    1f3e:	8c 93       	st	X, r24
    1f40:	0f c0       	rjmp	.+30     	; 0x1f60 <MEXTI_voidClearFlag+0x68>
			case EXTI1:	SET_BIT(GIFR,EXTI1_FLAG_BIT);	break;
    1f42:	aa e5       	ldi	r26, 0x5A	; 90
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	ea e5       	ldi	r30, 0x5A	; 90
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	80 68       	ori	r24, 0x80	; 128
    1f4e:	8c 93       	st	X, r24
    1f50:	07 c0       	rjmp	.+14     	; 0x1f60 <MEXTI_voidClearFlag+0x68>
			case EXTI2:	SET_BIT(GIFR,EXTI2_FLAG_BIT);	break;
    1f52:	aa e5       	ldi	r26, 0x5A	; 90
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	ea e5       	ldi	r30, 0x5A	; 90
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	80 62       	ori	r24, 0x20	; 32
    1f5e:	8c 93       	st	X, r24
		}
	}
}
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <MEXTI_voidSetCallBack>:
/************************************************************************************************/
void MEXTI_voidSetCallBack (EXTI_ID A_EXTI_ID, void(*ptrToFunc)(void))
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <MEXTI_voidSetCallBack+0x6>
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <MEXTI_voidSetCallBack+0x8>
    1f74:	0f 92       	push	r0
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	7b 83       	std	Y+3, r23	; 0x03
    1f7e:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_EXTI_ID<= EXTI2) && (ptrToFunc != NULL))
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	83 30       	cpi	r24, 0x03	; 3
    1f84:	58 f5       	brcc	.+86     	; 0x1fdc <MEXTI_voidSetCallBack+0x70>
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	39 f1       	breq	.+78     	; 0x1fdc <MEXTI_voidSetCallBack+0x70>
	{
		switch (A_EXTI_ID)
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	3d 83       	std	Y+5, r19	; 0x05
    1f96:	2c 83       	std	Y+4, r18	; 0x04
    1f98:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9c:	81 30       	cpi	r24, 0x01	; 1
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	81 f0       	breq	.+32     	; 0x1fc2 <MEXTI_voidSetCallBack+0x56>
    1fa2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fa4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fa6:	22 30       	cpi	r18, 0x02	; 2
    1fa8:	31 05       	cpc	r19, r1
    1faa:	91 f0       	breq	.+36     	; 0x1fd0 <MEXTI_voidSetCallBack+0x64>
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	a1 f4       	brne	.+40     	; 0x1fdc <MEXTI_voidSetCallBack+0x70>
		{
			case EXTI0:	EXTI0_Callback = ptrToFunc;	break;
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb8:	90 93 6b 01 	sts	0x016B, r25
    1fbc:	80 93 6a 01 	sts	0x016A, r24
    1fc0:	0d c0       	rjmp	.+26     	; 0x1fdc <MEXTI_voidSetCallBack+0x70>
			case EXTI1:	EXTI1_Callback = ptrToFunc;	break;
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc6:	90 93 6d 01 	sts	0x016D, r25
    1fca:	80 93 6c 01 	sts	0x016C, r24
    1fce:	06 c0       	rjmp	.+12     	; 0x1fdc <MEXTI_voidSetCallBack+0x70>
			case EXTI2:	EXTI2_Callback = ptrToFunc;	break;
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd4:	90 93 6f 01 	sts	0x016F, r25
    1fd8:	80 93 6e 01 	sts	0x016E, r24
		}
	}
}
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <__vector_1>:
/************************************************************************************************/
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    1fec:	1f 92       	push	r1
    1fee:	0f 92       	push	r0
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	0f 92       	push	r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	2f 93       	push	r18
    1ff8:	3f 93       	push	r19
    1ffa:	4f 93       	push	r20
    1ffc:	5f 93       	push	r21
    1ffe:	6f 93       	push	r22
    2000:	7f 93       	push	r23
    2002:	8f 93       	push	r24
    2004:	9f 93       	push	r25
    2006:	af 93       	push	r26
    2008:	bf 93       	push	r27
    200a:	ef 93       	push	r30
    200c:	ff 93       	push	r31
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
	if (EXTI0_Callback != NULL)
    2016:	80 91 6a 01 	lds	r24, 0x016A
    201a:	90 91 6b 01 	lds	r25, 0x016B
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	29 f0       	breq	.+10     	; 0x202c <__vector_1+0x40>
	{
		EXTI0_Callback();
    2022:	e0 91 6a 01 	lds	r30, 0x016A
    2026:	f0 91 6b 01 	lds	r31, 0x016B
    202a:	09 95       	icall
	}
}
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	ff 91       	pop	r31
    2032:	ef 91       	pop	r30
    2034:	bf 91       	pop	r27
    2036:	af 91       	pop	r26
    2038:	9f 91       	pop	r25
    203a:	8f 91       	pop	r24
    203c:	7f 91       	pop	r23
    203e:	6f 91       	pop	r22
    2040:	5f 91       	pop	r21
    2042:	4f 91       	pop	r20
    2044:	3f 91       	pop	r19
    2046:	2f 91       	pop	r18
    2048:	0f 90       	pop	r0
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	0f 90       	pop	r0
    204e:	1f 90       	pop	r1
    2050:	18 95       	reti

00002052 <__vector_2>:
/************************************************************************************************/
void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    2052:	1f 92       	push	r1
    2054:	0f 92       	push	r0
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	0f 92       	push	r0
    205a:	11 24       	eor	r1, r1
    205c:	2f 93       	push	r18
    205e:	3f 93       	push	r19
    2060:	4f 93       	push	r20
    2062:	5f 93       	push	r21
    2064:	6f 93       	push	r22
    2066:	7f 93       	push	r23
    2068:	8f 93       	push	r24
    206a:	9f 93       	push	r25
    206c:	af 93       	push	r26
    206e:	bf 93       	push	r27
    2070:	ef 93       	push	r30
    2072:	ff 93       	push	r31
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
	if (EXTI1_Callback != NULL)
    207c:	80 91 6c 01 	lds	r24, 0x016C
    2080:	90 91 6d 01 	lds	r25, 0x016D
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	29 f0       	breq	.+10     	; 0x2092 <__vector_2+0x40>
	{
		EXTI1_Callback();
    2088:	e0 91 6c 01 	lds	r30, 0x016C
    208c:	f0 91 6d 01 	lds	r31, 0x016D
    2090:	09 95       	icall
	}
}
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	ff 91       	pop	r31
    2098:	ef 91       	pop	r30
    209a:	bf 91       	pop	r27
    209c:	af 91       	pop	r26
    209e:	9f 91       	pop	r25
    20a0:	8f 91       	pop	r24
    20a2:	7f 91       	pop	r23
    20a4:	6f 91       	pop	r22
    20a6:	5f 91       	pop	r21
    20a8:	4f 91       	pop	r20
    20aa:	3f 91       	pop	r19
    20ac:	2f 91       	pop	r18
    20ae:	0f 90       	pop	r0
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	0f 90       	pop	r0
    20b4:	1f 90       	pop	r1
    20b6:	18 95       	reti

000020b8 <__vector_3>:
/************************************************************************************************/
void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    20b8:	1f 92       	push	r1
    20ba:	0f 92       	push	r0
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	0f 92       	push	r0
    20c0:	11 24       	eor	r1, r1
    20c2:	2f 93       	push	r18
    20c4:	3f 93       	push	r19
    20c6:	4f 93       	push	r20
    20c8:	5f 93       	push	r21
    20ca:	6f 93       	push	r22
    20cc:	7f 93       	push	r23
    20ce:	8f 93       	push	r24
    20d0:	9f 93       	push	r25
    20d2:	af 93       	push	r26
    20d4:	bf 93       	push	r27
    20d6:	ef 93       	push	r30
    20d8:	ff 93       	push	r31
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
	if (EXTI2_Callback != NULL)
    20e2:	80 91 6e 01 	lds	r24, 0x016E
    20e6:	90 91 6f 01 	lds	r25, 0x016F
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	29 f0       	breq	.+10     	; 0x20f8 <__vector_3+0x40>
	{
		EXTI2_Callback();
    20ee:	e0 91 6e 01 	lds	r30, 0x016E
    20f2:	f0 91 6f 01 	lds	r31, 0x016F
    20f6:	09 95       	icall
	}
}
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	ff 91       	pop	r31
    20fe:	ef 91       	pop	r30
    2100:	bf 91       	pop	r27
    2102:	af 91       	pop	r26
    2104:	9f 91       	pop	r25
    2106:	8f 91       	pop	r24
    2108:	7f 91       	pop	r23
    210a:	6f 91       	pop	r22
    210c:	5f 91       	pop	r21
    210e:	4f 91       	pop	r20
    2110:	3f 91       	pop	r19
    2112:	2f 91       	pop	r18
    2114:	0f 90       	pop	r0
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	0f 90       	pop	r0
    211a:	1f 90       	pop	r1
    211c:	18 95       	reti

0000211e <MGIE_voidEnable>:
#include "../include/MCAL/GIE/GIE_Cfg.h"
/************************************************************************************************/
/*										GI IMPLEMENTATION										*/
/************************************************************************************************/
void MGIE_voidEnable(void)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    2126:	af e5       	ldi	r26, 0x5F	; 95
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	ef e5       	ldi	r30, 0x5F	; 95
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	80 68       	ori	r24, 0x80	; 128
    2132:	8c 93       	st	X, r24
}
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <MGIE_voidDisable>:
/************************************************************************************************/
void MGIE_voidDisable(void)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    2142:	af e5       	ldi	r26, 0x5F	; 95
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	ef e5       	ldi	r30, 0x5F	; 95
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	8f 77       	andi	r24, 0x7F	; 127
    214e:	8c 93       	st	X, r24
}
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <HLED_voidSetLedStatus>:
#include "../include/HAL/LED/LED_Private.h"
#include "../include/HAL/LED/LED_Cfg.h"


void HLED_voidSetLedStatus(DIO_PORTS A_DIOPort, DIO_PINS A_DIOPin,LED_STATUS A_LedStatus)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	00 d0       	rcall	.+0      	; 0x215c <HLED_voidSetLedStatus+0x6>
    215c:	0f 92       	push	r0
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	6a 83       	std	Y+2, r22	; 0x02
    2166:	4b 83       	std	Y+3, r20	; 0x03
	MDIO_voidSetPinStatus(A_DIOPort, A_DIOPin, A_LedStatus);
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	6a 81       	ldd	r22, Y+2	; 0x02
    216c:	4b 81       	ldd	r20, Y+3	; 0x03
    216e:	0e 94 3f 0a 	call	0x147e	; 0x147e <MDIO_voidSetPinStatus>
}
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <HLED_voidToggleLedStatus>:
void HLED_voidToggleLedStatus(DIO_PORTS A_DIOPort, DIO_PINS A_DIOPin)
{
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	00 d0       	rcall	.+0      	; 0x2184 <HLED_voidToggleLedStatus+0x6>
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_DIOPort, A_DIOPin);
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	6a 81       	ldd	r22, Y+2	; 0x02
    2190:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <MDIO_voidTogglePinValue>
}
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <SSD_voidDisplayNumber>:
#include "../include/HAL/SSD/SSD_Cfg.h"
#include "../include/HAL/SSD/SSD_interface.h"
#include "../include/HAL/SSD/SSD_Private.h"

void SSD_voidDisplayNumber(DIO_PORTS A_DIOPort, Numbers A_u8Number)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <SSD_voidDisplayNumber+0x6>
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <SSD_voidDisplayNumber+0x8>
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8Number)
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	3c 83       	std	Y+4, r19	; 0x04
    21b6:	2b 83       	std	Y+3, r18	; 0x03
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	84 30       	cpi	r24, 0x04	; 4
    21be:	91 05       	cpc	r25, r1
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <SSD_voidDisplayNumber+0x26>
    21c2:	55 c0       	rjmp	.+170    	; 0x226e <SSD_voidDisplayNumber+0xd0>
    21c4:	2b 81       	ldd	r18, Y+3	; 0x03
    21c6:	3c 81       	ldd	r19, Y+4	; 0x04
    21c8:	25 30       	cpi	r18, 0x05	; 5
    21ca:	31 05       	cpc	r19, r1
    21cc:	dc f4       	brge	.+54     	; 0x2204 <SSD_voidDisplayNumber+0x66>
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	9c 81       	ldd	r25, Y+4	; 0x04
    21d2:	81 30       	cpi	r24, 0x01	; 1
    21d4:	91 05       	cpc	r25, r1
    21d6:	09 f4       	brne	.+2      	; 0x21da <SSD_voidDisplayNumber+0x3c>
    21d8:	3b c0       	rjmp	.+118    	; 0x2250 <SSD_voidDisplayNumber+0xb2>
    21da:	2b 81       	ldd	r18, Y+3	; 0x03
    21dc:	3c 81       	ldd	r19, Y+4	; 0x04
    21de:	22 30       	cpi	r18, 0x02	; 2
    21e0:	31 05       	cpc	r19, r1
    21e2:	2c f4       	brge	.+10     	; 0x21ee <SSD_voidDisplayNumber+0x50>
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	69 f1       	breq	.+90     	; 0x2246 <SSD_voidDisplayNumber+0xa8>
    21ec:	5d c0       	rjmp	.+186    	; 0x22a8 <SSD_voidDisplayNumber+0x10a>
    21ee:	2b 81       	ldd	r18, Y+3	; 0x03
    21f0:	3c 81       	ldd	r19, Y+4	; 0x04
    21f2:	22 30       	cpi	r18, 0x02	; 2
    21f4:	31 05       	cpc	r19, r1
    21f6:	89 f1       	breq	.+98     	; 0x225a <SSD_voidDisplayNumber+0xbc>
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	83 30       	cpi	r24, 0x03	; 3
    21fe:	91 05       	cpc	r25, r1
    2200:	89 f1       	breq	.+98     	; 0x2264 <SSD_voidDisplayNumber+0xc6>
    2202:	52 c0       	rjmp	.+164    	; 0x22a8 <SSD_voidDisplayNumber+0x10a>
    2204:	2b 81       	ldd	r18, Y+3	; 0x03
    2206:	3c 81       	ldd	r19, Y+4	; 0x04
    2208:	27 30       	cpi	r18, 0x07	; 7
    220a:	31 05       	cpc	r19, r1
    220c:	09 f4       	brne	.+2      	; 0x2210 <SSD_voidDisplayNumber+0x72>
    220e:	3e c0       	rjmp	.+124    	; 0x228c <SSD_voidDisplayNumber+0xee>
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	88 30       	cpi	r24, 0x08	; 8
    2216:	91 05       	cpc	r25, r1
    2218:	5c f4       	brge	.+22     	; 0x2230 <SSD_voidDisplayNumber+0x92>
    221a:	2b 81       	ldd	r18, Y+3	; 0x03
    221c:	3c 81       	ldd	r19, Y+4	; 0x04
    221e:	25 30       	cpi	r18, 0x05	; 5
    2220:	31 05       	cpc	r19, r1
    2222:	51 f1       	breq	.+84     	; 0x2278 <SSD_voidDisplayNumber+0xda>
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	9c 81       	ldd	r25, Y+4	; 0x04
    2228:	86 30       	cpi	r24, 0x06	; 6
    222a:	91 05       	cpc	r25, r1
    222c:	51 f1       	breq	.+84     	; 0x2282 <SSD_voidDisplayNumber+0xe4>
    222e:	3c c0       	rjmp	.+120    	; 0x22a8 <SSD_voidDisplayNumber+0x10a>
    2230:	2b 81       	ldd	r18, Y+3	; 0x03
    2232:	3c 81       	ldd	r19, Y+4	; 0x04
    2234:	28 30       	cpi	r18, 0x08	; 8
    2236:	31 05       	cpc	r19, r1
    2238:	71 f1       	breq	.+92     	; 0x2296 <SSD_voidDisplayNumber+0xf8>
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	89 30       	cpi	r24, 0x09	; 9
    2240:	91 05       	cpc	r25, r1
    2242:	71 f1       	breq	.+92     	; 0x22a0 <SSD_voidDisplayNumber+0x102>
    2244:	31 c0       	rjmp	.+98     	; 0x22a8 <SSD_voidDisplayNumber+0x10a>
	{
		case 0: MDIO_voidSetPortValue(A_DIOPort, ZERO);  break;
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	60 ec       	ldi	r22, 0xC0	; 192
    224a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <MDIO_voidSetPortValue>
    224e:	2c c0       	rjmp	.+88     	; 0x22a8 <SSD_voidDisplayNumber+0x10a>
		case 1: MDIO_voidSetPortValue(A_DIOPort, ONE);	 break;
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	69 ef       	ldi	r22, 0xF9	; 249
    2254:	0e 94 ab 0c 	call	0x1956	; 0x1956 <MDIO_voidSetPortValue>
    2258:	27 c0       	rjmp	.+78     	; 0x22a8 <SSD_voidDisplayNumber+0x10a>
		case 2: MDIO_voidSetPortValue(A_DIOPort, TWO);   break;
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	64 ea       	ldi	r22, 0xA4	; 164
    225e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <MDIO_voidSetPortValue>
    2262:	22 c0       	rjmp	.+68     	; 0x22a8 <SSD_voidDisplayNumber+0x10a>
		case 3: MDIO_voidSetPortValue(A_DIOPort, THREE); break;
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	60 eb       	ldi	r22, 0xB0	; 176
    2268:	0e 94 ab 0c 	call	0x1956	; 0x1956 <MDIO_voidSetPortValue>
    226c:	1d c0       	rjmp	.+58     	; 0x22a8 <SSD_voidDisplayNumber+0x10a>
		case 4: MDIO_voidSetPortValue(A_DIOPort, FOUR);  break;
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	69 e9       	ldi	r22, 0x99	; 153
    2272:	0e 94 ab 0c 	call	0x1956	; 0x1956 <MDIO_voidSetPortValue>
    2276:	18 c0       	rjmp	.+48     	; 0x22a8 <SSD_voidDisplayNumber+0x10a>
		case 5: MDIO_voidSetPortValue(A_DIOPort, FIVE);  break;
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	62 e9       	ldi	r22, 0x92	; 146
    227c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <MDIO_voidSetPortValue>
    2280:	13 c0       	rjmp	.+38     	; 0x22a8 <SSD_voidDisplayNumber+0x10a>
		case 6: MDIO_voidSetPortValue(A_DIOPort, SIX);   break;
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	62 e8       	ldi	r22, 0x82	; 130
    2286:	0e 94 ab 0c 	call	0x1956	; 0x1956 <MDIO_voidSetPortValue>
    228a:	0e c0       	rjmp	.+28     	; 0x22a8 <SSD_voidDisplayNumber+0x10a>
		case 7: MDIO_voidSetPortValue(A_DIOPort, SEVEN); break;
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	68 ef       	ldi	r22, 0xF8	; 248
    2290:	0e 94 ab 0c 	call	0x1956	; 0x1956 <MDIO_voidSetPortValue>
    2294:	09 c0       	rjmp	.+18     	; 0x22a8 <SSD_voidDisplayNumber+0x10a>
		case 8: MDIO_voidSetPortValue(A_DIOPort, EIGHT); break;
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	60 e8       	ldi	r22, 0x80	; 128
    229a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <MDIO_voidSetPortValue>
    229e:	04 c0       	rjmp	.+8      	; 0x22a8 <SSD_voidDisplayNumber+0x10a>
		case 9: MDIO_voidSetPortValue(A_DIOPort, NINE);  break;
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	60 e9       	ldi	r22, 0x90	; 144
    22a4:	0e 94 ab 0c 	call	0x1956	; 0x1956 <MDIO_voidSetPortValue>
		default: break;
	} 
}
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <SSD_voidDisplayAscending>:

void SSD_voidDisplayAscending(DIO_PORTS A_DIO_Port, u16 A_u16DelayinMs)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	62 97       	sbiw	r28, 0x12	; 18
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	88 8b       	std	Y+16, r24	; 0x10
    22cc:	7a 8b       	std	Y+18, r23	; 0x12
    22ce:	69 8b       	std	Y+17, r22	; 0x11
	for (u8 i = zero; i <= nine; i++)
    22d0:	1f 86       	std	Y+15, r1	; 0x0f
    22d2:	80 c0       	rjmp	.+256    	; 0x23d4 <SSD_voidDisplayAscending+0x11e>
	{
		SSD_voidDisplayNumber(A_DIO_Port, i);
    22d4:	88 89       	ldd	r24, Y+16	; 0x10
    22d6:	6f 85       	ldd	r22, Y+15	; 0x0f
    22d8:	0e 94 cf 10 	call	0x219e	; 0x219e <SSD_voidDisplayNumber>
		_delay_ms(A_u16DelayinMs);
    22dc:	89 89       	ldd	r24, Y+17	; 0x11
    22de:	9a 89       	ldd	r25, Y+18	; 0x12
    22e0:	cc 01       	movw	r24, r24
    22e2:	a0 e0       	ldi	r26, 0x00	; 0
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	8b 87       	std	Y+11, r24	; 0x0b
    22f4:	9c 87       	std	Y+12, r25	; 0x0c
    22f6:	ad 87       	std	Y+13, r26	; 0x0d
    22f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2300:	9e 85       	ldd	r25, Y+14	; 0x0e
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	4a e7       	ldi	r20, 0x7A	; 122
    2308:	53 e4       	ldi	r21, 0x43	; 67
    230a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	8f 83       	std	Y+7, r24	; 0x07
    2314:	98 87       	std	Y+8, r25	; 0x08
    2316:	a9 87       	std	Y+9, r26	; 0x09
    2318:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    231a:	6f 81       	ldd	r22, Y+7	; 0x07
    231c:	78 85       	ldd	r23, Y+8	; 0x08
    231e:	89 85       	ldd	r24, Y+9	; 0x09
    2320:	9a 85       	ldd	r25, Y+10	; 0x0a
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e8       	ldi	r20, 0x80	; 128
    2328:	5f e3       	ldi	r21, 0x3F	; 63
    232a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    232e:	88 23       	and	r24, r24
    2330:	2c f4       	brge	.+10     	; 0x233c <SSD_voidDisplayAscending+0x86>
		__ticks = 1;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
    233a:	3f c0       	rjmp	.+126    	; 0x23ba <SSD_voidDisplayAscending+0x104>
	else if (__tmp > 65535)
    233c:	6f 81       	ldd	r22, Y+7	; 0x07
    233e:	78 85       	ldd	r23, Y+8	; 0x08
    2340:	89 85       	ldd	r24, Y+9	; 0x09
    2342:	9a 85       	ldd	r25, Y+10	; 0x0a
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	3f ef       	ldi	r19, 0xFF	; 255
    2348:	4f e7       	ldi	r20, 0x7F	; 127
    234a:	57 e4       	ldi	r21, 0x47	; 71
    234c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2350:	18 16       	cp	r1, r24
    2352:	4c f5       	brge	.+82     	; 0x23a6 <SSD_voidDisplayAscending+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2354:	6b 85       	ldd	r22, Y+11	; 0x0b
    2356:	7c 85       	ldd	r23, Y+12	; 0x0c
    2358:	8d 85       	ldd	r24, Y+13	; 0x0d
    235a:	9e 85       	ldd	r25, Y+14	; 0x0e
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e2       	ldi	r20, 0x20	; 32
    2362:	51 e4       	ldi	r21, 0x41	; 65
    2364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	bc 01       	movw	r22, r24
    236e:	cd 01       	movw	r24, r26
    2370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	9e 83       	std	Y+6, r25	; 0x06
    237a:	8d 83       	std	Y+5, r24	; 0x05
    237c:	0f c0       	rjmp	.+30     	; 0x239c <SSD_voidDisplayAscending+0xe6>
    237e:	89 e1       	ldi	r24, 0x19	; 25
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	9c 83       	std	Y+4, r25	; 0x04
    2384:	8b 83       	std	Y+3, r24	; 0x03
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	9c 81       	ldd	r25, Y+4	; 0x04
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <SSD_voidDisplayAscending+0xd4>
    238e:	9c 83       	std	Y+4, r25	; 0x04
    2390:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2392:	8d 81       	ldd	r24, Y+5	; 0x05
    2394:	9e 81       	ldd	r25, Y+6	; 0x06
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	00 97       	sbiw	r24, 0x00	; 0
    23a2:	69 f7       	brne	.-38     	; 0x237e <SSD_voidDisplayAscending+0xc8>
    23a4:	14 c0       	rjmp	.+40     	; 0x23ce <SSD_voidDisplayAscending+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a6:	6f 81       	ldd	r22, Y+7	; 0x07
    23a8:	78 85       	ldd	r23, Y+8	; 0x08
    23aa:	89 85       	ldd	r24, Y+9	; 0x09
    23ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	9e 83       	std	Y+6, r25	; 0x06
    23b8:	8d 83       	std	Y+5, r24	; 0x05
    23ba:	8d 81       	ldd	r24, Y+5	; 0x05
    23bc:	9e 81       	ldd	r25, Y+6	; 0x06
    23be:	9a 83       	std	Y+2, r25	; 0x02
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	9a 81       	ldd	r25, Y+2	; 0x02
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	f1 f7       	brne	.-4      	; 0x23c6 <SSD_voidDisplayAscending+0x110>
    23ca:	9a 83       	std	Y+2, r25	; 0x02
    23cc:	89 83       	std	Y+1, r24	; 0x01
	} 
}

void SSD_voidDisplayAscending(DIO_PORTS A_DIO_Port, u16 A_u16DelayinMs)
{
	for (u8 i = zero; i <= nine; i++)
    23ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d0:	8f 5f       	subi	r24, 0xFF	; 255
    23d2:	8f 87       	std	Y+15, r24	; 0x0f
    23d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d6:	8a 30       	cpi	r24, 0x0A	; 10
    23d8:	08 f4       	brcc	.+2      	; 0x23dc <SSD_voidDisplayAscending+0x126>
    23da:	7c cf       	rjmp	.-264    	; 0x22d4 <SSD_voidDisplayAscending+0x1e>
	{
		SSD_voidDisplayNumber(A_DIO_Port, i);
		_delay_ms(A_u16DelayinMs);
	}
}
    23dc:	62 96       	adiw	r28, 0x12	; 18
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <SSD_voidDisplayDescending>:

void SSD_voidDisplayDescending(DIO_PORTS A_DIO_Port, u8 A_u16DelayinMs)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	61 97       	sbiw	r28, 0x11	; 17
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	88 8b       	std	Y+16, r24	; 0x10
    2404:	69 8b       	std	Y+17, r22	; 0x11
	for (s8 i = 9; i >= 0; i--)
    2406:	89 e0       	ldi	r24, 0x09	; 9
    2408:	8f 87       	std	Y+15, r24	; 0x0f
    240a:	81 c0       	rjmp	.+258    	; 0x250e <SSD_voidDisplayDescending+0x120>
	{
		SSD_voidDisplayNumber(A_DIO_Port, i);
    240c:	9f 85       	ldd	r25, Y+15	; 0x0f
    240e:	88 89       	ldd	r24, Y+16	; 0x10
    2410:	69 2f       	mov	r22, r25
    2412:	0e 94 cf 10 	call	0x219e	; 0x219e <SSD_voidDisplayNumber>
		_delay_ms(A_u16DelayinMs);
    2416:	89 89       	ldd	r24, Y+17	; 0x11
    2418:	88 2f       	mov	r24, r24
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	a0 e0       	ldi	r26, 0x00	; 0
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	8b 87       	std	Y+11, r24	; 0x0b
    242e:	9c 87       	std	Y+12, r25	; 0x0c
    2430:	ad 87       	std	Y+13, r26	; 0x0d
    2432:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2434:	6b 85       	ldd	r22, Y+11	; 0x0b
    2436:	7c 85       	ldd	r23, Y+12	; 0x0c
    2438:	8d 85       	ldd	r24, Y+13	; 0x0d
    243a:	9e 85       	ldd	r25, Y+14	; 0x0e
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	4a e7       	ldi	r20, 0x7A	; 122
    2442:	53 e4       	ldi	r21, 0x43	; 67
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	8f 83       	std	Y+7, r24	; 0x07
    244e:	98 87       	std	Y+8, r25	; 0x08
    2450:	a9 87       	std	Y+9, r26	; 0x09
    2452:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2454:	6f 81       	ldd	r22, Y+7	; 0x07
    2456:	78 85       	ldd	r23, Y+8	; 0x08
    2458:	89 85       	ldd	r24, Y+9	; 0x09
    245a:	9a 85       	ldd	r25, Y+10	; 0x0a
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e8       	ldi	r20, 0x80	; 128
    2462:	5f e3       	ldi	r21, 0x3F	; 63
    2464:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2468:	88 23       	and	r24, r24
    246a:	2c f4       	brge	.+10     	; 0x2476 <SSD_voidDisplayDescending+0x88>
		__ticks = 1;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9e 83       	std	Y+6, r25	; 0x06
    2472:	8d 83       	std	Y+5, r24	; 0x05
    2474:	3f c0       	rjmp	.+126    	; 0x24f4 <SSD_voidDisplayDescending+0x106>
	else if (__tmp > 65535)
    2476:	6f 81       	ldd	r22, Y+7	; 0x07
    2478:	78 85       	ldd	r23, Y+8	; 0x08
    247a:	89 85       	ldd	r24, Y+9	; 0x09
    247c:	9a 85       	ldd	r25, Y+10	; 0x0a
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	3f ef       	ldi	r19, 0xFF	; 255
    2482:	4f e7       	ldi	r20, 0x7F	; 127
    2484:	57 e4       	ldi	r21, 0x47	; 71
    2486:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    248a:	18 16       	cp	r1, r24
    248c:	4c f5       	brge	.+82     	; 0x24e0 <SSD_voidDisplayDescending+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2490:	7c 85       	ldd	r23, Y+12	; 0x0c
    2492:	8d 85       	ldd	r24, Y+13	; 0x0d
    2494:	9e 85       	ldd	r25, Y+14	; 0x0e
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9e 83       	std	Y+6, r25	; 0x06
    24b4:	8d 83       	std	Y+5, r24	; 0x05
    24b6:	0f c0       	rjmp	.+30     	; 0x24d6 <SSD_voidDisplayDescending+0xe8>
    24b8:	89 e1       	ldi	r24, 0x19	; 25
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9c 83       	std	Y+4, r25	; 0x04
    24be:	8b 83       	std	Y+3, r24	; 0x03
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	9c 81       	ldd	r25, Y+4	; 0x04
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <SSD_voidDisplayDescending+0xd6>
    24c8:	9c 83       	std	Y+4, r25	; 0x04
    24ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24cc:	8d 81       	ldd	r24, Y+5	; 0x05
    24ce:	9e 81       	ldd	r25, Y+6	; 0x06
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	9e 83       	std	Y+6, r25	; 0x06
    24d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <SSD_voidDisplayDescending+0xca>
    24de:	14 c0       	rjmp	.+40     	; 0x2508 <SSD_voidDisplayDescending+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e0:	6f 81       	ldd	r22, Y+7	; 0x07
    24e2:	78 85       	ldd	r23, Y+8	; 0x08
    24e4:	89 85       	ldd	r24, Y+9	; 0x09
    24e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	9e 83       	std	Y+6, r25	; 0x06
    24f2:	8d 83       	std	Y+5, r24	; 0x05
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	9a 83       	std	Y+2, r25	; 0x02
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <SSD_voidDisplayDescending+0x112>
    2504:	9a 83       	std	Y+2, r25	; 0x02
    2506:	89 83       	std	Y+1, r24	; 0x01
	}
}

void SSD_voidDisplayDescending(DIO_PORTS A_DIO_Port, u8 A_u16DelayinMs)
{
	for (s8 i = 9; i >= 0; i--)
    2508:	8f 85       	ldd	r24, Y+15	; 0x0f
    250a:	81 50       	subi	r24, 0x01	; 1
    250c:	8f 87       	std	Y+15, r24	; 0x0f
    250e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2510:	88 23       	and	r24, r24
    2512:	0c f0       	brlt	.+2      	; 0x2516 <SSD_voidDisplayDescending+0x128>
    2514:	7b cf       	rjmp	.-266    	; 0x240c <SSD_voidDisplayDescending+0x1e>
	{
		SSD_voidDisplayNumber(A_DIO_Port, i);
		_delay_ms(A_u16DelayinMs);
	}
}
    2516:	61 96       	adiw	r28, 0x11	; 17
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <TWI_voidInitMaster>:
#include "../include/MCAL/TWI/TWI_private.h"
#include "../include/MCAL/TWI/TWI_config.h"

/*Set Master Address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	0f 92       	push	r0
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    2534:	a6 e5       	ldi	r26, 0x56	; 86
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e6 e5       	ldi	r30, 0x56	; 86
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	80 64       	ori	r24, 0x40	; 64
    2540:	8c 93       	st	X, r24

	/*Set SCL frequency to 100KHz, with 8MHz system frequency*/
	/*1- Set TWBR = 2*/
	TWBR = 2;
    2542:	e0 e2       	ldi	r30, 0x20	; 32
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	80 83       	st	Z, r24
	/*2- Clear The Prescaler bit (TWPS0 - TWPS1)*/
	CLR_BIT(TWSR, TWSR_TWPS0);
    254a:	a1 e2       	ldi	r26, 0x21	; 33
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e1 e2       	ldi	r30, 0x21	; 33
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	8e 7f       	andi	r24, 0xFE	; 254
    2556:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
    2558:	a1 e2       	ldi	r26, 0x21	; 33
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e1 e2       	ldi	r30, 0x21	; 33
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	8d 7f       	andi	r24, 0xFD	; 253
    2564:	8c 93       	st	X, r24

	/*Check if the master node will be addressed or not*/
	if(Copy_u8Address == 0)
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	88 23       	and	r24, r24
    256a:	29 f0       	breq	.+10     	; 0x2576 <TWI_voidInitMaster+0x4e>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/ //bits from 1 to 7
		TWAR = (Copy_u8Address << 1);
    256c:	e2 e2       	ldi	r30, 0x22	; 34
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	88 0f       	add	r24, r24
    2574:	80 83       	st	Z, r24
	}

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    2576:	a6 e5       	ldi	r26, 0x56	; 86
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e6 e5       	ldi	r30, 0x56	; 86
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	84 60       	ori	r24, 0x04	; 4
    2582:	8c 93       	st	X, r24
}
    2584:	0f 90       	pop	r0
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	0f 92       	push	r0
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Required Address to The Slave*/
	TWAR = Copy_u8Address << 1;
    2598:	e2 e2       	ldi	r30, 0x22	; 34
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	88 0f       	add	r24, r24
    25a0:	80 83       	st	Z, r24

	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    25a2:	a6 e5       	ldi	r26, 0x56	; 86
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e6 e5       	ldi	r30, 0x56	; 86
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	80 64       	ori	r24, 0x40	; 64
    25ae:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    25b0:	a6 e5       	ldi	r26, 0x56	; 86
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	e6 e5       	ldi	r30, 0x56	; 86
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	84 60       	ori	r24, 0x04	; 4
    25bc:	8c 93       	st	X, r24
}
    25be:	0f 90       	pop	r0
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <TWI_ErrorStatusSendStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendStartConditionWithACK(void)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	0f 92       	push	r0
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    25d0:	19 82       	std	Y+1, r1	; 0x01
//	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
	/*Send Start Condition Bit*/
	SET_BIT(TWCR, TWCR_TWSTA);
    25d2:	a6 e5       	ldi	r26, 0x56	; 86
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e6 e5       	ldi	r30, 0x56	; 86
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	80 62       	ori	r24, 0x20	; 32
    25de:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    25e0:	a6 e5       	ldi	r26, 0x56	; 86
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e6 e5       	ldi	r30, 0x56	; 86
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	80 68       	ori	r24, 0x80	; 128
    25ec:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    25ee:	e6 e5       	ldi	r30, 0x56	; 86
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	88 23       	and	r24, r24
    25f6:	dc f7       	brge	.-10     	; 0x25ee <TWI_ErrorStatusSendStartConditionWithACK+0x28>

	if((TWSR & STATUS_BIT_MASK) != START_ACK)
    25f8:	e1 e2       	ldi	r30, 0x21	; 33
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	88 2f       	mov	r24, r24
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	88 7f       	andi	r24, 0xF8	; 248
    2604:	90 70       	andi	r25, 0x00	; 0
    2606:	88 30       	cpi	r24, 0x08	; 8
    2608:	91 05       	cpc	r25, r1
    260a:	11 f0       	breq	.+4      	; 0x2610 <TWI_ErrorStatusSendStartConditionWithACK+0x4a>
	{
		Local_ErrorStatus = StartConditionError;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
    2610:	89 81       	ldd	r24, Y+1	; 0x01
}
    2612:	0f 90       	pop	r0
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	08 95       	ret

0000261a <TWI_ErrorStatusSendRepeatedStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendRepeatedStartConditionWithACK(void)
{
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	0f 92       	push	r0
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    2624:	19 82       	std	Y+1, r1	; 0x01
	// clear INT flag
	// Send Repeated Start Condition
	// Enable TWI
	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
    2626:	a6 e5       	ldi	r26, 0x56	; 86
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e6 e5       	ldi	r30, 0x56	; 86
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	84 6a       	ori	r24, 0xA4	; 164
    2632:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	//	SET_BIT(TWCR, TWCR_TWINT);

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    2634:	e6 e5       	ldi	r30, 0x56	; 86
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	88 23       	and	r24, r24
    263c:	dc f7       	brge	.-10     	; 0x2634 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x1a>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != REP_START_ACK)
    263e:	e1 e2       	ldi	r30, 0x21	; 33
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	88 2f       	mov	r24, r24
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	88 7f       	andi	r24, 0xF8	; 248
    264a:	90 70       	andi	r25, 0x00	; 0
    264c:	80 31       	cpi	r24, 0x10	; 16
    264e:	91 05       	cpc	r25, r1
    2650:	11 f0       	breq	.+4      	; 0x2656 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x3c>
	{
		Local_ErrorStatus = RepeatedStartError;
    2652:	82 e0       	ldi	r24, 0x02	; 2
    2654:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
    2656:	89 81       	ldd	r24, Y+1	; 0x01
}
    2658:	0f 90       	pop	r0
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithWriteACK(u8 Copy_u8SlaveAddress)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	00 d0       	rcall	.+0      	; 0x2666 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x6>
    2666:	0f 92       	push	r0
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	8b 83       	std	Y+3, r24	; 0x03
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    266e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8TWCRValue = 0;
    2670:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress << 1);
    2672:	e3 e2       	ldi	r30, 0x23	; 35
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	88 0f       	add	r24, r24
    267a:	80 83       	st	Z, r24

	/*Set The Write Request in the LSB in the data Register*/
	CLR_BIT(TWDR, TWDR_TWD0);
    267c:	a3 e2       	ldi	r26, 0x23	; 35
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	e3 e2       	ldi	r30, 0x23	; 35
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	8e 7f       	andi	r24, 0xFE	; 254
    2688:	8c 93       	st	X, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    268a:	a6 e5       	ldi	r26, 0x56	; 86
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	e6 e5       	ldi	r30, 0x56	; 86
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	8f 7d       	andi	r24, 0xDF	; 223
    2696:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    2698:	a6 e5       	ldi	r26, 0x56	; 86
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	e6 e5       	ldi	r30, 0x56	; 86
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	80 68       	ori	r24, 0x80	; 128
    26a4:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    26a6:	e6 e5       	ldi	r30, 0x56	; 86
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	88 23       	and	r24, r24
    26ae:	dc f7       	brge	.-10     	; 0x26a6 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x46>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_WR_ACK)
    26b0:	e1 e2       	ldi	r30, 0x21	; 33
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	88 2f       	mov	r24, r24
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	88 7f       	andi	r24, 0xF8	; 248
    26bc:	90 70       	andi	r25, 0x00	; 0
    26be:	88 31       	cpi	r24, 0x18	; 24
    26c0:	91 05       	cpc	r25, r1
    26c2:	11 f0       	breq	.+4      	; 0x26c8 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x68>
	{
		Local_ErrorStatus = SlaveAddressWithWriteError;
    26c4:	83 e0       	ldi	r24, 0x03	; 3
    26c6:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_ErrorStatus;
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <TWI_ErrorStatusSendSlaveAddressWithReadACK>:



TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithReadACK(u8 Copy_u8SlaveAddress)
{
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	00 d0       	rcall	.+0      	; 0x26dc <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x6>
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    26e2:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = Copy_u8SlaveAddress << 1;
    26e4:	e3 e2       	ldi	r30, 0x23	; 35
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	88 0f       	add	r24, r24
    26ec:	80 83       	st	Z, r24

	/*Set The Read Request in the LSB in the data Register*/
	SET_BIT(TWDR, TWDR_TWD0);
    26ee:	a3 e2       	ldi	r26, 0x23	; 35
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	e3 e2       	ldi	r30, 0x23	; 35
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	81 60       	ori	r24, 0x01	; 1
    26fa:	8c 93       	st	X, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    26fc:	a6 e5       	ldi	r26, 0x56	; 86
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e6 e5       	ldi	r30, 0x56	; 86
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	8f 7d       	andi	r24, 0xDF	; 223
    2708:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    270a:	a6 e5       	ldi	r26, 0x56	; 86
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e6 e5       	ldi	r30, 0x56	; 86
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	80 68       	ori	r24, 0x80	; 128
    2716:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    2718:	e6 e5       	ldi	r30, 0x56	; 86
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	88 23       	and	r24, r24
    2720:	dc f7       	brge	.-10     	; 0x2718 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x42>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_RD_ACK)
    2722:	e1 e2       	ldi	r30, 0x21	; 33
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	88 2f       	mov	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	88 7f       	andi	r24, 0xF8	; 248
    272e:	90 70       	andi	r25, 0x00	; 0
    2730:	80 34       	cpi	r24, 0x40	; 64
    2732:	91 05       	cpc	r25, r1
    2734:	11 f0       	breq	.+4      	; 0x273a <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x64>
	{
		Local_ErrorStatus = SlaveAddressWithReadError;
    2736:	84 e0       	ldi	r24, 0x04	; 4
    2738:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    273a:	89 81       	ldd	r24, Y+1	; 0x01
}
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <TWI_ErrorStatusMasterWriteDataByteWithACK>:




TWI_ErrorStatus_t TWI_ErrorStatusMasterWriteDataByteWithACK(u8 Copy_u8DataByte)
{
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	00 d0       	rcall	.+0      	; 0x274c <TWI_ErrorStatusMasterWriteDataByteWithACK+0x6>
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    2752:	19 82       	std	Y+1, r1	; 0x01


	/*Set The Data To The TWDR Register*/
	TWDR = Copy_u8DataByte;
    2754:	e3 e2       	ldi	r30, 0x23	; 35
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	8a 81       	ldd	r24, Y+2	; 0x02
    275a:	80 83       	st	Z, r24



	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    275c:	a6 e5       	ldi	r26, 0x56	; 86
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e6 e5       	ldi	r30, 0x56	; 86
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	80 68       	ori	r24, 0x80	; 128
    2768:	8c 93       	st	X, r24


	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    276a:	e6 e5       	ldi	r30, 0x56	; 86
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	88 23       	and	r24, r24
    2772:	dc f7       	brge	.-10     	; 0x276a <TWI_ErrorStatusMasterWriteDataByteWithACK+0x24>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_WR_BYTE_ACK)
    2774:	e1 e2       	ldi	r30, 0x21	; 33
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	88 7f       	andi	r24, 0xF8	; 248
    2780:	90 70       	andi	r25, 0x00	; 0
    2782:	88 32       	cpi	r24, 0x28	; 40
    2784:	91 05       	cpc	r25, r1
    2786:	11 f0       	breq	.+4      	; 0x278c <TWI_ErrorStatusMasterWriteDataByteWithACK+0x46>
	{
		Local_ErrorStatus = MasterWriteByteWithACKError;
    2788:	85 e0       	ldi	r24, 0x05	; 5
    278a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    278c:	89 81       	ldd	r24, Y+1	; 0x01
}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <TWI_ErrorStatusMasterReadDataByteWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithACK(u8 * Copy_pu8ReceivedByte)
{
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	00 d0       	rcall	.+0      	; 0x279e <TWI_ErrorStatusMasterReadDataByteWithACK+0x6>
    279e:	0f 92       	push	r0
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	9b 83       	std	Y+3, r25	; 0x03
    27a6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    27a8:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
    27aa:	a6 e5       	ldi	r26, 0x56	; 86
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e6 e5       	ldi	r30, 0x56	; 86
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	80 68       	ori	r24, 0x80	; 128
    27b6:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    27b8:	e6 e5       	ldi	r30, 0x56	; 86
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	88 23       	and	r24, r24
    27c0:	dc f7       	brge	.-10     	; 0x27b8 <TWI_ErrorStatusMasterReadDataByteWithACK+0x20>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
    27c2:	e1 e2       	ldi	r30, 0x21	; 33
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	88 2f       	mov	r24, r24
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	88 7f       	andi	r24, 0xF8	; 248
    27ce:	90 70       	andi	r25, 0x00	; 0
    27d0:	80 35       	cpi	r24, 0x50	; 80
    27d2:	91 05       	cpc	r25, r1
    27d4:	19 f0       	breq	.+6      	; 0x27dc <TWI_ErrorStatusMasterReadDataByteWithACK+0x44>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
    27d6:	86 e0       	ldi	r24, 0x06	; 6
    27d8:	89 83       	std	Y+1, r24	; 0x01
    27da:	06 c0       	rjmp	.+12     	; 0x27e8 <TWI_ErrorStatusMasterReadDataByteWithACK+0x50>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWDR;
    27dc:	e3 e2       	ldi	r30, 0x23	; 35
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	ea 81       	ldd	r30, Y+2	; 0x02
    27e4:	fb 81       	ldd	r31, Y+3	; 0x03
    27e6:	80 83       	st	Z, r24
	}

	return Local_ErrorStatus;
    27e8:	89 81       	ldd	r24, Y+1	; 0x01

}
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <TWI_voidSendStopCondition>:


void TWI_voidSendStopCondition(void)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62

	/*Send a stop condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTO);
    27fe:	a6 e5       	ldi	r26, 0x56	; 86
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e6 e5       	ldi	r30, 0x56	; 86
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	80 61       	ori	r24, 0x10	; 16
    280a:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    280c:	a6 e5       	ldi	r26, 0x56	; 86
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	e6 e5       	ldi	r30, 0x56	; 86
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	80 68       	ori	r24, 0x80	; 128
    2818:	8c 93       	st	X, r24
}
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <Any>:
#include "../include/HAL/SSD/SSD_Interface.h"
#include "../include/HAL/BCD2SSD/BCD2SSD_Interface.h"

u8 COUNTER = 1;

void Any (void){
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
	BCDSSD_voidDisplayNumber(PORTD, LOW_NIPPLE, COUNTER);
    2828:	90 91 68 01 	lds	r25, 0x0168
    282c:	83 e0       	ldi	r24, 0x03	; 3
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	49 2f       	mov	r20, r25
    2832:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <BCDSSD_voidDisplayNumber>
	COUNTER++;
    2836:	80 91 68 01 	lds	r24, 0x0168
    283a:	8f 5f       	subi	r24, 0xFF	; 255
    283c:	80 93 68 01 	sts	0x0168, r24
	if (COUNTER > 9)
    2840:	80 91 68 01 	lds	r24, 0x0168
    2844:	8a 30       	cpi	r24, 0x0A	; 10
    2846:	10 f0       	brcs	.+4      	; 0x284c <Any+0x2c>
	{
		COUNTER = 0;
    2848:	10 92 68 01 	sts	0x0168, r1
	}
}
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <main>:

int main (void)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidInit();
    285a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <MDIO_voidInit>
	MEXTI_voidConfig(EXTI2, FALLING_EDGE);
    285e:	82 e0       	ldi	r24, 0x02	; 2
    2860:	62 e0       	ldi	r22, 0x02	; 2
    2862:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <MEXTI_voidConfig>
	MEXTI_voidSetCallBack(EXTI2, Any);
    2866:	20 e1       	ldi	r18, 0x10	; 16
    2868:	34 e1       	ldi	r19, 0x14	; 20
    286a:	82 e0       	ldi	r24, 0x02	; 2
    286c:	b9 01       	movw	r22, r18
    286e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <MEXTI_voidSetCallBack>
	BCDSSD_voidDisplayNumber(PORTD, LOW_NIPPLE, Zero);
    2872:	83 e0       	ldi	r24, 0x03	; 3
    2874:	60 e0       	ldi	r22, 0x00	; 0
    2876:	40 e0       	ldi	r20, 0x00	; 0
    2878:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <BCDSSD_voidDisplayNumber>
	MEXTI_voidEnable(EXTI2);
    287c:	82 e0       	ldi	r24, 0x02	; 2
    287e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <MEXTI_voidEnable>
	MGIE_voidEnable();
    2882:	0e 94 8f 10 	call	0x211e	; 0x211e <MGIE_voidEnable>
    2886:	ff cf       	rjmp	.-2      	; 0x2886 <main+0x34>

00002888 <__prologue_saves__>:
    2888:	2f 92       	push	r2
    288a:	3f 92       	push	r3
    288c:	4f 92       	push	r4
    288e:	5f 92       	push	r5
    2890:	6f 92       	push	r6
    2892:	7f 92       	push	r7
    2894:	8f 92       	push	r8
    2896:	9f 92       	push	r9
    2898:	af 92       	push	r10
    289a:	bf 92       	push	r11
    289c:	cf 92       	push	r12
    289e:	df 92       	push	r13
    28a0:	ef 92       	push	r14
    28a2:	ff 92       	push	r15
    28a4:	0f 93       	push	r16
    28a6:	1f 93       	push	r17
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	ca 1b       	sub	r28, r26
    28b2:	db 0b       	sbc	r29, r27
    28b4:	0f b6       	in	r0, 0x3f	; 63
    28b6:	f8 94       	cli
    28b8:	de bf       	out	0x3e, r29	; 62
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	cd bf       	out	0x3d, r28	; 61
    28be:	09 94       	ijmp

000028c0 <__epilogue_restores__>:
    28c0:	2a 88       	ldd	r2, Y+18	; 0x12
    28c2:	39 88       	ldd	r3, Y+17	; 0x11
    28c4:	48 88       	ldd	r4, Y+16	; 0x10
    28c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    28c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    28ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    28cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    28ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    28d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    28d2:	b9 84       	ldd	r11, Y+9	; 0x09
    28d4:	c8 84       	ldd	r12, Y+8	; 0x08
    28d6:	df 80       	ldd	r13, Y+7	; 0x07
    28d8:	ee 80       	ldd	r14, Y+6	; 0x06
    28da:	fd 80       	ldd	r15, Y+5	; 0x05
    28dc:	0c 81       	ldd	r16, Y+4	; 0x04
    28de:	1b 81       	ldd	r17, Y+3	; 0x03
    28e0:	aa 81       	ldd	r26, Y+2	; 0x02
    28e2:	b9 81       	ldd	r27, Y+1	; 0x01
    28e4:	ce 0f       	add	r28, r30
    28e6:	d1 1d       	adc	r29, r1
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	ed 01       	movw	r28, r26
    28f4:	08 95       	ret

000028f6 <_exit>:
    28f6:	f8 94       	cli

000028f8 <__stop_program>:
    28f8:	ff cf       	rjmp	.-2      	; 0x28f8 <__stop_program>
